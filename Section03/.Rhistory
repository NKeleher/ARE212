geom_vline(xintercept = as.numeric(ymd(20090101)),
color = "grey20", size = 0.4) +
xlab("Date") +
ylab("Price (USD per therm)") +
ylim(c(0, max(price_dt$price))) +
scale_color_manual("Price:",
values = rep(c("#6A1B9A", "#FC845F"), each = 2),
labels = c("PG&E: Baseline", "PG&E: Excess", "SoCalGas: Baseline", "SoCalGas: Excess")) +
scale_linetype_manual("Price:",
values = rep(c("solid", "twodash"), 2),
labels = c("PG&E: Baseline", "PG&E: Excess", "SoCalGas: Baseline", "SoCalGas: Excess")) +
theme(legend.box = "horizontal")
# Save
save_beamer(gg_tmp, "priceRegimeSeries",
# save_paper(gg_tmp, "priceRegimeSeries", 9, 5.6)
# save_paper(gg_tmp, "priceRegimeSeriesSmall",
#   width = 6.4, height = 3.8,
#   themes = theme(legend.margin=margin(t=-0.75, r=0.1, b=-0.5, l=0.1, unit="cm")))
themes = theme(
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 16),
legend.key.width = unit(1.5, "cm"),
legend.key.height = unit(2.5, "cm"),
legend.box.just = "left",
NULL))
rm(list = c("price_dt", "gg_tmp"))
gc()
# Figure: PG&E and SoCal price regime series -----------------------------------
# Load data
price_dt <- readRDS(paste0(dir_figures, "ggplotPriceSeries.rds"))$data
# Wide to long
price_dt <- price_dt[, .(month_date, charge_base, charge_excess, utility)] %>%
melt(id.var = c("month_date", "utility"),
variable.name = "price_type", value.name = "price")
# Create joint variable of utility and price type
price_dt[, utility_type := paste0(utility, "_", price_type)]
# The plot
gg_tmp <- ggplot(data = price_dt,
aes(x = month_date, y = price, color = utility_type, linetype = utility_type)) +
geom_line(
size = 0.5) +
# size = 0.4) +
geom_hline(yintercept = 0, color = "grey20", size = 0.4) +
geom_vline(xintercept = as.numeric(ymd(20090101)),
color = "grey20", size = 0.4) +
xlab("Date") +
ylab("Price (USD per therm)") +
ylim(c(0, max(price_dt$price))) +
scale_color_manual("Price:",
values = rep(c("#6A1B9A", "#FC845F"), each = 2),
labels = c("PG&E: Baseline", "PG&E: Excess", "SoCalGas: Baseline", "SoCalGas: Excess")) +
scale_linetype_manual("Price:",
values = rep(c("solid", "twodash"), 2),
labels = c("PG&E: Baseline", "PG&E: Excess", "SoCalGas: Baseline", "SoCalGas: Excess")) +
theme(legend.box = "horizontal")
# Save
save_beamer(gg_tmp, "priceRegimeSeries",
# save_paper(gg_tmp, "priceRegimeSeries", 9, 5.6)
# save_paper(gg_tmp, "priceRegimeSeriesSmall",
#   width = 6.4, height = 3.8,
#   themes = theme(legend.margin=margin(t=-0.75, r=0.1, b=-0.5, l=0.1, unit="cm")))
themes = theme(
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 16),
legend.key.width = unit(1.5, "cm"),
legend.key.height = unit(2.5, "cm"),
legend.box.just = "top",
NULL))
rm(list = c("price_dt", "gg_tmp"))
gc()
# Figure: PG&E and SoCal price regime series -----------------------------------
# Load data
price_dt <- readRDS(paste0(dir_figures, "ggplotPriceSeries.rds"))$data
# Wide to long
price_dt <- price_dt[, .(month_date, charge_base, charge_excess, utility)] %>%
melt(id.var = c("month_date", "utility"),
variable.name = "price_type", value.name = "price")
# Create joint variable of utility and price type
price_dt[, utility_type := paste0(utility, "_", price_type)]
# The plot
gg_tmp <- ggplot(data = price_dt,
aes(x = month_date, y = price, color = utility_type, linetype = utility_type)) +
geom_line(
size = 0.5) +
# size = 0.4) +
geom_hline(yintercept = 0, color = "grey20", size = 0.4) +
geom_vline(xintercept = as.numeric(ymd(20090101)),
color = "grey20", size = 0.4) +
xlab("Date") +
ylab("Price (USD per therm)") +
ylim(c(0, max(price_dt$price))) +
scale_color_manual("Price:",
values = rep(c("#6A1B9A", "#FC845F"), each = 2),
labels = c("PG&E: Baseline", "PG&E: Excess", "SoCalGas: Baseline", "SoCalGas: Excess")) +
scale_linetype_manual("Price:",
values = rep(c("solid", "twodash"), 2),
labels = c("PG&E: Baseline", "PG&E: Excess", "SoCalGas: Baseline", "SoCalGas: Excess")) +
theme(legend.box = "horizontal")
# Save
save_beamer(gg_tmp, "priceRegimeSeries",
# save_paper(gg_tmp, "priceRegimeSeries", 9, 5.6)
# save_paper(gg_tmp, "priceRegimeSeriesSmall",
#   width = 6.4, height = 3.8,
#   themes = theme(legend.margin=margin(t=-0.75, r=0.1, b=-0.5, l=0.1, unit="cm")))
themes = theme(
legend.title = element_text(face = "bold"),
legend.text = element_text(size = 16),
legend.key.width = unit(1.5, "cm"),
legend.key.height = unit(2.5, "cm"),
NULL))
rm(list = c("price_dt", "gg_tmp"))
gc()
viridis::viridis_pal()
viridis::viridis_pal(10)
viridisLite::viridis_pal(10)
viridis::viridis_pal(10)
?viridis::viridis_pal(10)
?viridis::viridis_pal()
?viridis::inferno_pal()
?viridisLite::inferno_pal()
?viridis
# Setup ------------------------------------------------------------------------
# Options
Sys.setenv(TZ = "US/Pacific")
options(stringsAsFactors = F)
options(bitmapType = "cairo")
# Packages
library(pacman)
p_load(prism, raster, data.table, lubridate, stringr,
ggplot2, ggforce, extrafont, Cairo, rmapshaper, ggthemes, viridis,
magrittr)
try(ymd(today()))
# Directories
dir_project <- "/Users/edwardarubin/Dropbox/Research/MyProjects/NaturalGas/"
dir_csv     <- paste0(dir_project, "DataCsv/")
dir_rds     <- paste0(dir_project, "DataR/")
dir_spatial <- paste0(dir_project, "DataSpatial/")
# dir_figures <- paste0(dir_project, "Text/ForSubmission/Figures/")
dir_figures <- paste0(dir_project, "Presentations/Beamer20180131UO/Figures/")
# Define colors
very_light_grey <- "#E0E0E0"
light_grey      <- "#BDBDBD"
mid_grey        <- "#9E9E9E"
dark_grey       <- "#616161"
red_pink        <- "#E40045"
# purple          <- "#310769"
purple          <- "#6A1B9A"
light_purple    <- "#9E17A0"
# My ggplot themes
theme_beamer <- theme_bw() + theme(
panel.border = element_blank(),
axis.ticks = element_blank(),
legend.position = 'bottom',
legend.key = element_blank(),
panel.grid = element_blank(),
text = element_text(family = "Roboto", color = "black",
size = 16),
title = element_text(size = 18),
legend.text = element_text(size = 18),
legend.key.size = unit(2.5, "cm"))
theme_paper <- theme_bw() + theme(
panel.border = element_blank(),
axis.ticks = element_blank(),
legend.position = 'bottom',
legend.key = element_blank(),
panel.grid = element_blank(),
text = element_text(family = "CharisSIL", color = "black",
size = 11),
axis.text = element_text(color = "black"),
title = element_text(size = 12),
legend.text = element_text(size = 11),
legend.key.size = unit(1.5, "cm"))
# My own save functions
save_beamer <- function(gg_tmp, name, width = 16 * 0.7, height = 10 * 0.7,
themes = NULL) {
ggsave(filename = paste0(name, ".pdf"),
path = dir_figures,
plot = gg_tmp + theme_beamer + themes,
width = width,
height = height,
device = cairo_pdf)
embed_fonts(paste0(dir_figures, name, ".pdf"))
}
save_paper <- function(gg_tmp, name, width = 6.4, height = 4,
themes = NULL) {
ggsave(filename = paste0(name, ".pdf"),
path = dir_figures,
plot = gg_tmp + theme_paper + themes,
width = width,
height = height,
device = cairo_pdf)
embed_fonts(paste0(dir_figures, name, ".pdf"))
}
henry_dt <- fread(paste0(dir_csv, "naturalGasPricesHenryHub.csv"))
# Change names
setnames(henry_dt, c("date", "price"))
# Format variables
henry_dt[, `:=`(
# Convert date to actual date format
date = mdy(date),
# Convert price from dollars per million Btu to thm (divide by 10)
price = price / 10
)]
# Plot the Henry Hub spot price over time
gg_tmp <- ggplot(data = henry_dt,
aes(x = date, y = price)) +
geom_ribbon(aes(ymin = 0, ymax = price), fill = "grey95") +
geom_line(color = "grey90", size = 0.3) +
geom_point(color = "grey25", size = 0.6, shape = 16) +
# geom_line(color = "grey90", size = 0.1) +
# geom_point(color = "grey25", size = 0.1, shape = 16) +
geom_hline(yintercept = 0) +
# geom_vline(xintercept = min(henry_dt$date) %>% as.numeric()) +
xlab("Date") +
ylab("Daily natural gas spot price (USD per therm)") +
ylim(c(0, max(henry_dt$price)))
gg_tmp
gg_tmp + theme_beamer
gg_tmp <- ggplot(data = henry_dt,
aes(x = date, y = price)) +
geom_ribbon(aes(ymin = 0, ymax = price), fill = very_light_grey) +
geom_line(color = "grey90", size = 0.3) +
geom_point(color = "grey25", size = 0.6, shape = 16) +
# geom_line(color = "grey90", size = 0.1) +
# geom_point(color = "grey25", size = 0.1, shape = 16) +
geom_hline(yintercept = 0) +
# geom_vline(xintercept = min(henry_dt$date) %>% as.numeric()) +
xlab("Date") +
ylab("Daily natural gas spot price (USD per therm)") +
ylim(c(0, max(henry_dt$price)))
gg_tmp + theme_beamer
gg_tmp <- ggplot(data = henry_dt,
aes(x = date, y = price)) +
geom_ribbon(aes(ymin = 0, ymax = price), fill = very_light_grey) +
geom_line(color = "light_grey", size = 0.3) +
geom_point(color = "grey25", size = 0.6, shape = 16) +
# geom_line(color = "grey90", size = 0.1) +
# geom_point(color = "grey25", size = 0.1, shape = 16) +
geom_hline(yintercept = 0) +
# geom_vline(xintercept = min(henry_dt$date) %>% as.numeric()) +
xlab("Date") +
ylab("Daily natural gas spot price (USD per therm)") +
ylim(c(0, max(henry_dt$price)))
gg_tmp + theme_beamer
light_grey
gg_tmp <- ggplot(data = henry_dt,
aes(x = date, y = price)) +
geom_ribbon(aes(ymin = 0, ymax = price), fill = very_light_grey) +
geom_line(color = light_grey, size = 0.3) +
geom_point(color = "grey25", size = 0.6, shape = 16) +
# geom_line(color = "grey90", size = 0.1) +
# geom_point(color = "grey25", size = 0.1, shape = 16) +
geom_hline(yintercept = 0) +
# geom_vline(xintercept = min(henry_dt$date) %>% as.numeric()) +
xlab("Date") +
ylab("Daily natural gas spot price (USD per therm)") +
ylim(c(0, max(henry_dt$price)))
light_grey
gg_tmp + theme_beamer
gg_tmp <- ggplot(data = henry_dt,
aes(x = date, y = price)) +
geom_ribbon(aes(ymin = 0, ymax = price), fill = very_light_grey) +
geom_line(color = light_grey, size = 0.3) +
geom_point(color = dark_grey, size = 0.6, shape = 16) +
# geom_line(color = "grey90", size = 0.1) +
# geom_point(color = "grey25", size = 0.1, shape = 16) +
geom_hline(yintercept = 0) +
# geom_vline(xintercept = min(henry_dt$date) %>% as.numeric()) +
xlab("Date") +
ylab("Daily natural gas spot price (USD per therm)") +
ylim(c(0, max(henry_dt$price)))
gg_tmp + theme_beamer
gg_tmp <- ggplot(data = henry_dt,
aes(x = date, y = price)) +
geom_ribbon(aes(ymin = 0, ymax = price), fill = very_light_grey) +
geom_line(color = light_grey, size = 0.3) +
geom_point(color = purple, size = 0.6, shape = 16) +
# geom_line(color = "grey90", size = 0.1) +
# geom_point(color = "grey25", size = 0.1, shape = 16) +
geom_hline(yintercept = 0) +
# geom_vline(xintercept = min(henry_dt$date) %>% as.numeric()) +
xlab("Date") +
ylab("Daily natural gas spot price (USD per therm)") +
ylim(c(0, max(henry_dt$price)))
gg_tmp + theme_beamer
# Figure: Henry Hub spot price time series -------------------------------------
# Load Henry Hub price data
henry_dt <- fread(paste0(dir_csv, "naturalGasPricesHenryHub.csv"))
# Change names
setnames(henry_dt, c("date", "price"))
# Format variables
henry_dt[, `:=`(
# Convert date to actual date format
date = mdy(date),
# Convert price from dollars per million Btu to thm (divide by 10)
price = price / 10
)]
# Plot the Henry Hub spot price over time
gg_tmp <- ggplot(data = henry_dt,
aes(x = date, y = price)) +
geom_ribbon(aes(ymin = 0, ymax = price), fill = very_light_grey) +
geom_line(color = light_grey, size = 0.3) +
geom_point(color = "grey25", size = 0.6, shape = 16) +
# geom_line(color = "grey90", size = 0.1) +
# geom_point(color = "grey25", size = 0.1, shape = 16) +
geom_hline(yintercept = 0) +
# geom_vline(xintercept = min(henry_dt$date) %>% as.numeric()) +
xlab("Date") +
ylab("Daily natural gas spot price (USD per therm)") +
ylim(c(0, max(henry_dt$price)))
# Save
save_beamer(gg_tmp, "priceSpot")
# save_paper(gg_tmp, "priceSpot", 9, 5.6)
# save_paper(gg_tmp, "priceSpotSmall")
rm(list = c("gg_tmp", "henry_dt"))
gc()
# Figure: Henry Hub spot price time series -------------------------------------
# Load Henry Hub price data
henry_dt <- fread(paste0(dir_csv, "naturalGasPricesHenryHub.csv"))
# Change names
setnames(henry_dt, c("date", "price"))
# Format variables
henry_dt[, `:=`(
# Convert date to actual date format
date = mdy(date),
# Convert price from dollars per million Btu to thm (divide by 10)
price = price / 10
)]
# Plot the Henry Hub spot price over time
gg_tmp <- ggplot(data = henry_dt,
aes(x = date, y = price)) +
geom_ribbon(aes(ymin = 0, ymax = price), fill = "grey90") +
geom_line(color = "grey85", size = 0.3) +
geom_point(color = "grey25", size = 0.6, shape = 16) +
# geom_line(color = "grey90", size = 0.1) +
# geom_point(color = "grey25", size = 0.1, shape = 16) +
geom_hline(yintercept = 0) +
# geom_vline(xintercept = min(henry_dt$date) %>% as.numeric()) +
xlab("Date") +
ylab("Daily natural gas spot price (USD per therm)") +
ylim(c(0, max(henry_dt$price)))
# Save
save_beamer(gg_tmp, "priceSpot")
# save_paper(gg_tmp, "priceSpot", 9, 5.6)
# save_paper(gg_tmp, "priceSpotSmall")
rm(list = c("gg_tmp", "henry_dt"))
gc()
?readr::read_csv
class(NA)
class(as.numeric(NA))
c(1, NA) %>% class
class(c(1, NA))
class(c(1, NA)[2])
class(NA)
is.na(NA)
# Class of NA
class(NA)
# Class of NA from a vector of numbers
class(c(1, NA)[2])
# Class of NA from a vector of characters
class(c("hi", NA)[2])
class(c(T, NA)[2])
NA + 2
paste0(NA, 1)
is.na(0/0)
identical(NA, NaN)
identical(NA, NA)
NA == NA
is.na(NaN)
is.na(0 / 0)
class(NaN)
paste("Test", NA)
2 + NA
# What is NaN?
0 / 0
# Is NaN NA?
is.na(NaN)
# Is NaN NA?
is.na(0 / 0)
identical(NA, NaN)
equal(1 , 1)
NA == NaN
is.na(NA)
is.na(1)
is.na(T)
test_df <- data.frame(
x = c(NA, "A", "B", NA, "A"),
y = c(1:4, NA))
test_df %>% filter(x == "A")
filter(test_df, x == "A")
filter(test_df, x == "A")
test_df <- data.frame(
x = c(NA, "A", "B", NA, "A"),
y = c(1:4, NA))
filter(test_df, x == "A")
filter
dplyr::filter(test_df, x == "A")
test_df
dplyr::filter(test_df, x != "A")
NA == "A"
NA == "B"
NA == NaN
identical(NA, NaN)
dplyr::filter(test_df, x == "A" | is.na(x))
# Setup ----
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(haven, dplyr)
# Define directories
dir_class <- "/Users/edwardarubin/Dropbox/Teaching/ARE212/"
dir_sec3 <- paste0(dir_class, "Section03/")
# Load the data ----
cars <- read_dta(
file = paste0(dir_sec3, "auto.dta"))
rm(list = ls())
# Setup ------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
# Packages
library(haven)
library(dplyr)
# Set the directory
setwd("/Users/edwardarubin/Dropbox/Teaching/ARE212/Section03/")
# Simple sample function -------------------------------------------------------
# Define the function (named 'triple_prod')
triple_prod <- function(x, y, z) {
# Take the product of the three arguments
tmp_prod <- x * y * z
# Return 'tmp_prod'
return(tmp_prod)
}
tmp_prod
triple_prod
read.csv
triple_prod
triple_prod(x = 2, y = 3, z = 5)
triple_prod(2, 3, 5)
setwd("/Users/edwardarubin/Dropbox/Teaching/ARE212/Section03/")
cars <- read_dta(file = "auto.dta")
cars
data <- cars
y <- "price"
X <- c("mpg", "weight")
select(cars, "mpg")
select(cars, X)
# Select y variable data from 'data'
y_data <- select_(data, .dots = y)
# Select X variable data from 'data'
X_data <- select_(data, .dots = X)
y
y_data
X_data
X_data
X_data %>% head
mutate(X_data, ones = 1) %>% head
mutate(X_data, ones = c(2,3)) %>% head
mutate(X_data, ones = 1) %>% head
mutate(X_data, mpg + weight) %>% head
X_data <- mutate_(X_data, "ones" = 1)
X_data
select_(X_data, "ones", .dots = X)
X
X_data <- select_(data, .dots = X)
X_data
X_data <- as.matrix(X_data)
X_data
X_data <- cbind(1, X_data)
X_data
colnames(X_data)[1] <- "ones"
X_data %>% head
X_data <- select_(data, .dots = X)
cbind(1, X_data)
# Define the function
b_ols <- function(data, y, X) {
# Require the 'dplyr' package
require(dplyr)
# Select y variable data from 'data'
y_data <- select_(data, .dots = y)
# Convert y_data to matrices
y_data <- as.matrix(y_data)
# Select X variable data from 'data'
X_data <- select_(data, .dots = X)
# Add a column of ones to X_data
# X_data <- mutate_(X_data, "ones" = 1)
# Move the intercept column to the front
# X_data <- select_(X_data, "ones", .dots = X)
# Convert X_data to matrices
X_data <- as.matrix(X_data)
X_data <- cbind(1, X_data)
colnames(X_data)[1] <- "ones"
# Calculate beta hat
beta_hat <- solve(t(X_data) %*% X_data) %*% t(X_data) %*% y_data
# Change the name of 'ones' to 'intercept'
rownames(beta_hat) <- c("intercept", X)
# Return beta_hat
return(beta_hat)
}
b_ols(cars, y = "price", X = c("mpg", "weight"))
lm
p_load(lfe)
library(pacman); p_load(lfe)
canned_ols <- felm(formula = price ~ mpg + weight, data = cars)
canned_ols
b_ols(cars, y = "price", X = c("mpg", "weight"))
canned_ols
canned_ols %>% class
summary(canned_ols)
?solve
round(1/9, 4)
round(1/9, 4) %>% print()
