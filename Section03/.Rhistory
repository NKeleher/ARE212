# Move the intercept column to the front
X_data <- select_(X_data, "ones", .dots = X)
# Convert y_data and X_data to matrices
y_data <- as.matrix(y_data)
X_data <- as.matrix(X_data)
# Calculate beta hat
beta_hat <- solve(t(X_data) %*% X_data) %*% t(X_data) %*% y_data
beta_hat
beta_hat %>% class
beta_hat
beta_hat %>% class
beta_hat %>% names
beta_hat %>% rownames
# Require the 'dplyr' package
require(dplyr)
# Select y variable data from 'data'
y_data <- select_(data, .dots = y)
# Convert y_data to matrices
y_data <- as.matrix(y_data)
# Select X variable data from 'data'
X_data <- select_(data, .dots = X)
# Add a column of ones to X_data
X_data <- mutate_(X_data, "ones" = 1)
# Move the intercept column to the front
X_data <- select_(X_data, "ones", .dots = X)
# Convert X_data to matrices
X_data <- as.matrix(X_data)
# Calculate beta hat
beta_hat <- solve(t(X_data) %*% X_data) %*% t(X_data) %*% y_data
# Change the name of 'ones' to 'intercept'
rownames(beta_hat) <- c("intercept", X)
beta_hat
beta_hat %>% as.vector()
beta_hat %>% unlist
beta_hat %>% colnames()
colnames(beta_hat) <- NULL
beta_hat
cars %>% select(price, mpg) %>% summary()
cars %>% select(, price, mpg) %>% summary()
cars %>% select(., price, mpg) %>% summary()
cars %>% select(, price, mpg) %>% summary()
cars %>% select(., price, mpg) %>% summary()
# Define the function
b_ols <- function(data, y, X) {
# Require the 'dplyr' package
require(dplyr)
# Select y variable data from 'data'
y_data <- select_(data, .dots = y)
# Convert y_data to matrices
y_data <- as.matrix(y_data)
# Select X variable data from 'data'
X_data <- select_(data, .dots = X)
# Add a column of ones to X_data
X_data <- mutate_(X_data, "ones" = 1)
# Move the intercept column to the front
X_data <- select_(X_data, "ones", .dots = X)
# Convert X_data to matrices
X_data <- as.matrix(X_data)
# Calculate beta hat
beta_hat <- solve(t(X_data) %*% X_data) %*% t(X_data) %*% y_data
# Change the name of 'ones' to 'intercept'
rownames(beta_hat) <- c("intercept", X)
# Return beta_hat
return(beta_hat)
}
b_ols(cars, "price", c("mpg", "weight"))
lm(price ~ mpg + weight)
lm(price ~ mpg + weight, cars)
b_ols <- function(data, y, X) {
# Require the 'dplyr' package
require(dplyr)
# Create the y matrix
y_data <- data %>%
# Select y variable data from 'data'
select_(.dots = y) %>%
# Convert y_data to matrices
as.matrix()
# Create the X matrix
X_data <- data %>%
# Select X variable data from 'data'
select_(.dots = X)
# Add a column of ones to X_data
mutate_("ones" = 1)
# Move the intercept column to the front
select_("ones", .dots = X)
# Convert X_data to matrices
as.matrix()
# Calculate beta hat
beta_hat <- solve(t(X_data) %*% X_data) %*% t(X_data) %*% y_data
# Change the name of 'ones' to 'intercept'
rownames(beta_hat) <- c("intercept", X)
# Return beta_hat
return(beta_hat)
}
b_ols(cars, "price", c("mpg", "weight"))
b_ols <- function(data, y, X) {
# Require the 'dplyr' package
require(dplyr)
# Create the y matrix
y_data <- data %>%
# Select y variable data from 'data'
select_(.dots = y) %>%
# Convert y_data to matrices
as.matrix()
# Create the X matrix
X_data <- data %>%
# Select X variable data from 'data'
select_(.dots = X) %>%
# Add a column of ones to X_data
mutate_("ones" = 1) %>%
# Move the intercept column to the front
select_("ones", .dots = X) %>%
# Convert X_data to matrices
as.matrix()
# Calculate beta hat
beta_hat <- solve(t(X_data) %*% X_data) %*% t(X_data) %*% y_data
# Change the name of 'ones' to 'intercept'
rownames(beta_hat) <- c("intercept", X)
# Return beta_hat
return(beta_hat)
}
b_ols(cars, "price", c("mpg", "weight"))
lm(price ~ mpg + weight, cars) %>% summary()
?for
for(i in 1:10) print(i)
paste("Hi", 1)
?lapply
list("a", 1, c(1,2,3))
lapply(X = 2:4, FUN = function(x) paste0(1:3))
lapply(X = 2:4, FUN = function(x) paste(1:3))
lapply(X = 0:4, FUN = sqrt)
lapply(X = 0:4, FUN = sqrt)
cars
cars
cars %>% names
cars %>% head
cars %>% select(foreign)
cars %>% select(foreign) %>% summary
cars %>% select(foreign) %>% class
cars %>% str
target_vars <- c("price", "headroom", "trunk", "length", "turn",
"displacement", "gear_ratio", "foreign")
target_vars <- c("price", "headroom", "trunk", "length", "turn",
"displacement", "gear_ratio", "foreign")
ols_results <- lapply(
X = target_vars,
FUN = function(i) b_ols(data = cars, y = i, X = c("mpg", "weight"))
)
# The results
ols_results
ols_results %>% class
ols_results %>% bind_rows()
ols_results %>% bind_cols()
ols_results %>% cbind()
ols_results
ols_results[[1]] %>% class
ols_results[[1]] %>% data.frame
ols_results[[1]] %>% tibble
ols_results[[1]] %>% as.tibble
ols_results[[1]] %>% data.frame
ols_results[[1]] %>% as.data.frame
?bind_cols
rm(ols_results)
target_vars <- c("price", "headroom", "trunk", "length", "turn",
"displacement", "gear_ratio", "foreign")
# The 'lapply' call
results_list <- lapply(
X = target_vars,
FUN = function(i) b_ols(data = cars, y = i, X = c("mpg", "weight"))
)
# The results
results_list
# Cleaning up the results list
results_dt <- lapply(X = results_list, FUN = data.frame) %>% bind_cols()
# Check out results_dt
results_dt
rownames(results_dt)
# Define the target outcome variables
target_vars <- c("price", "headroom", "trunk", "length", "turn",
"displacement", "gear_ratio", "foreign")
# The 'lapply' call
results_list <- lapply(
X = target_vars,
FUN = function(i) b_ols(data = cars, y = i, X = c("mpg", "weight"))
)
# The results
results_list
# Cleaning up the results list
results_dt <- lapply(X = results_list, FUN = data.frame) %>% bind_cols()
# We lose the row names in the process; add them back
rownames(results_dt) <- c("intercept", "mpg", "weight")
# Check out results_dt
results_dt
felm(price ~ mpg, cars) %>% class
library(lfe)
felm(price ~ mpg, cars) %>% class
felm(price ~ mpg, cars) %>% coef
matrix(1:3, ncol = 3)
matrix(1:3, ncol = 3) %>% as.vector
data_baker <- function(sample_n, true_beta) {
# First generate x from N(0,1)
x <- rnorm(sample_n)
# Now the error from N(0,1)
e <- rnorm(sample_n)
# Now combine true_beta, x, and e to get y
y <- true_beta[1] + true_beta[2] * x + e
# Define the data matrix of independent vars.
X <- cbind(1, x)
# Force y to be a matrix
y <- matrix(y, ncol = 1)
# Calculate the OLS estimates
b_ols <- solve(t(X) %*% X) %*% t(X) %*% y
# Convert b_ols to vector
b_ols <- b_ols %>% as.vector()
# Calculate bias
the_bias <- (true_beta - b_ols) %>% data.frame()
}
data_baker(30, c(1,2))
data_baker(30, c(1,2))
data_baker <- function(sample_n, true_beta) {
# First generate x from N(0,1)
x <- rnorm(sample_n)
# Now the error from N(0,1)
e <- rnorm(sample_n)
# Now combine true_beta, x, and e to get y
y <- true_beta[1] + true_beta[2] * x + e
# Define the data matrix of independent vars.
X <- cbind(1, x)
# Force y to be a matrix
y <- matrix(y, ncol = 1)
# Calculate the OLS estimates
b_ols <- solve(t(X) %*% X) %*% t(X) %*% y
# Convert b_ols to vector
b_ols <- b_ols %>% as.vector()
# Calculate bias
the_bias <- (true_beta - b_ols) %>% data.frame()
# Return the bias
return(the_bias)
}
data_baker(30, c(1,2))
data_baker(30, c(1,2))
data_baker(30, c(1,2))
data_baker(30, c(1,2))
set.seed(12345)
# Run once
data_baker(sample_n = 100, true_beta = c(1, 3))
set.seed(12345)
# Run once
data_baker(sample_n = 100, true_beta = c(1, 3))
?lapply
# A function to calculate bias
data_baker <- function(sample_n, true_beta) {
# First generate x from N(0,1)
x <- rnorm(sample_n)
# Now the error from N(0,1)
e <- rnorm(sample_n)
# Now combine true_beta, x, and e to get y
y <- true_beta[1] + true_beta[2] * x + e
# Define the data matrix of independent vars.
X <- cbind(1, x)
# Force y to be a matrix
y <- matrix(y, ncol = 1)
# Calculate the OLS estimates
b_ols <- solve(t(X) %*% X) %*% t(X) %*% y
# Convert b_ols to vector
b_ols <- b_ols %>% as.vector()
# Calculate bias, force to 2x1 data.frame()
the_bias <- (true_beta - b_ols) %>%
as.matrix(ncol = 2) %>% data.frame()
# Set names
names(the_bias) <- c("bias_intercept", "bias_x")
# Return the bias
return(the_bias)
}
# Set seed
set.seed(12345)
# Run once
data_baker(sample_n = 100, true_beta = c(1, 3))
sample_n <- 100
true_beta <- c(1,3)
x <- rnorm(sample_n)
e <- rnorm(sample_n)
y <- true_beta[1] + true_beta[2] * x + e
X <- cbind(1, x)
y <- matrix(y, ncol = 1)
b_ols <- solve(t(X) %*% X) %*% t(X) %*% y
b_ols <- b_ols %>% as.vector()
b_ols
the_bias <- (true_beta - b_ols) %>%
as.matrix(ncol = 2) %>% data.frame()
the_bias
the_bias %>% class
the_bias <- (true_beta - b_ols) %>%
as.matrix(ncol = 2) %>% as.data.frame()
the_bias
(true_beta - b_ols)
matrix(true_beta - b_ols)
matrix(true_beta - b_ols, ncol = 2)
the_bias <- (true_beta - b_ols) %>%
as.matrix(., ncol = 2) %>% as.data.frame()
the_bias
(true_beta - b_ols)
(true_beta - b_ols) %>%
as.matrix(., ncol = 2)
(true_beta - b_ols) as.matrix(data = ., ncol = 2)
(true_beta - b_ols) %>% as.matrix(data = ., ncol = 2)
(true_beta - b_ols) %>% as.matrix(x = ., ncol = 2)
(true_beta - b_ols) %>% matrix(x = ., ncol = 2)
(true_beta - b_ols) %>% matrix(data = ., ncol = 2)
(true_beta - b_ols) %>% matrix(ncol = 2)
the_bias <- (true_beta - b_ols) %>%
matrix(ncol = 2) %>% as.data.frame()
the_bias
data_baker(100, c(1,3))
data_baker <- function(sample_n, true_beta) {
# First generate x from N(0,1)
x <- rnorm(sample_n)
# Now the error from N(0,1)
e <- rnorm(sample_n)
# Now combine true_beta, x, and e to get y
y <- true_beta[1] + true_beta[2] * x + e
# Define the data matrix of independent vars.
X <- cbind(1, x)
# Force y to be a matrix
y <- matrix(y, ncol = 1)
# Calculate the OLS estimates
b_ols <- solve(t(X) %*% X) %*% t(X) %*% y
# Convert b_ols to vector
b_ols <- b_ols %>% as.vector()
# Calculate bias, force to 2x1 data.frame()
the_bias <- (true_beta - b_ols) %>%
matrix(ncol = 2) %>% data.frame()
# Set names
names(the_bias) <- c("bias_intercept", "bias_x")
# Return the bias
return(the_bias)
}
# Set seed
set.seed(12345)
# Run once
data_baker(sample_n = 100, true_beta = c(1, 3))
n_sims <- 100
the_sims <- lapply(
X = 1:n_sims,
FUN = function(i) data_baker(sample_n, true_beta))
the_sims
the_sims %>% bind_rows
rm(x)
rm(y)
rm(X_data)
rm(y_data)
rm(X)
rm(the_bias)
rm(results_dt)
rm(data)
rm(beta_hat)
rm(b_ols)
rm(e)
rm(i)
rm(n_sims)
rm(results_list)
rm(sample_n)
rm(target_vars)
rm(the_sims)
rm(tmp)
rm(true_beta)
rm(data_baker())
rm(data_baker
)
bias_simulator <- function(n_sims, sample_n, true_beta) {
# A function to calculate bias
data_baker <- function(sample_n, true_beta) {
# First generate x from N(0,1)
x <- rnorm(sample_n)
# Now the error from N(0,1)
e <- rnorm(sample_n)
# Now combine true_beta, x, and e to get y
y <- true_beta[1] + true_beta[2] * x + e
# Define the data matrix of independent vars.
X <- cbind(1, x)
# Force y to be a matrix
y <- matrix(y, ncol = 1)
# Calculate the OLS estimates
b_ols <- solve(t(X) %*% X) %*% t(X) %*% y
# Convert b_ols to vector
b_ols <- b_ols %>% as.vector()
# Calculate bias, force to 2x1 data.frame()
the_bias <- (true_beta - b_ols) %>%
matrix(ncol = 2) %>% data.frame()
# Set names
names(the_bias) <- c("bias_intercept", "bias_x")
# Return the bias
return(the_bias)
}
# Run data_baker() n_sims times with given parameters
the_sims <- lapply(
X = 1:n_sims,
FUN = function(i) data_baker(sample_n, true_beta)) %>%
# Bind the rows together to output a nice data.frame
bind_rows()
}
bias_simulator(n_sims = 100, sample_n = 100, true_beta = c(1,3))
bias_simulator(n_sims = 100, sample_n = 100, true_beta = c(1,3))
bias_simulator <- function(n_sims, sample_n, true_beta) {
# A function to calculate bias
data_baker <- function(sample_n, true_beta) {
# First generate x from N(0,1)
x <- rnorm(sample_n)
# Now the error from N(0,1)
e <- rnorm(sample_n)
# Now combine true_beta, x, and e to get y
y <- true_beta[1] + true_beta[2] * x + e
# Define the data matrix of independent vars.
X <- cbind(1, x)
# Force y to be a matrix
y <- matrix(y, ncol = 1)
# Calculate the OLS estimates
b_ols <- solve(t(X) %*% X) %*% t(X) %*% y
# Convert b_ols to vector
b_ols <- b_ols %>% as.vector()
# Calculate bias, force to 2x1 data.frame()
the_bias <- (true_beta - b_ols) %>%
matrix(ncol = 2) %>% data.frame()
# Set names
names(the_bias) <- c("bias_intercept", "bias_x")
# Return the bias
return(the_bias)
}
# Run data_baker() n_sims times with given parameters
sims_dt <- lapply(
X = 1:n_sims,
FUN = function(i) data_baker(sample_n, true_beta)) %>%
# Bind the rows together to output a nice data.frame
bind_rows()
# Return sim_dt
return(sim_dt)
}
sim_dt <- bias_simulator(n_sims = 1e4, sample_n = 100, true_beta = c(1,3))
# A function to run a full simulation ------------------------------------------
bias_simulator <- function(n_sims, sample_n, true_beta) {
# A function to calculate bias
data_baker <- function(sample_n, true_beta) {
# First generate x from N(0,1)
x <- rnorm(sample_n)
# Now the error from N(0,1)
e <- rnorm(sample_n)
# Now combine true_beta, x, and e to get y
y <- true_beta[1] + true_beta[2] * x + e
# Define the data matrix of independent vars.
X <- cbind(1, x)
# Force y to be a matrix
y <- matrix(y, ncol = 1)
# Calculate the OLS estimates
b_ols <- solve(t(X) %*% X) %*% t(X) %*% y
# Convert b_ols to vector
b_ols <- b_ols %>% as.vector()
# Calculate bias, force to 2x1 data.frame()
the_bias <- (true_beta - b_ols) %>%
matrix(ncol = 2) %>% data.frame()
# Set names
names(the_bias) <- c("bias_intercept", "bias_x")
# Return the bias
return(the_bias)
}
# Run data_baker() n_sims times with given parameters
sims_dt <- lapply(
X = 1:n_sims,
FUN = function(i) data_baker(sample_n, true_beta)) %>%
# Bind the rows together to output a nice data.frame
bind_rows()
# Return sim_dt
return(sims_dt)
}
# Run it
sim_dt <- bias_simulator(n_sims = 1e4, sample_n = 100, true_beta = c(1,3))
sim_dt
# Set seed
set.seed(12345)
# Run it
sim_dt <- bias_simulator(n_sims = 1e4, sample_n = 100, true_beta = c(1,3))
sim_dt
sim_dt[,2]
hist(sim_dt[,2],
main = "Is OLS biased?",
xlab = "Bias")
# Emphasize the zero line
abline(v = 0, col = "blue", lwd = 3)
?hist
hist(sim_dt[,2],
breaks = 30,
main = "Is OLS biased?",
xlab = "Bias")
# Emphasize the zero line
abline(v = 0, col = "blue", lwd = 3)
hist(sim_dt[,2],
breaks = 30,
main = "Is OLS biased for x's coefficient?",
xlab = "Bias")
# Emphasize the zero line
abline(v = 0, col = "blue", lwd = 3)
hist(sim_dt[,1],
breaks = 30,
main = "Is OLS biased for x's coefficient?",
xlab = "Bias")
# Emphasize the zero line
abline(v = 0, col = "blue", lwd = 3)
hist(sim_dt[,2],
breaks = 30,
main = "Is OLS unbiased?",
xlab = "Bias")
# Emphasize the zero line
abline(v = 0, col = "blue", lwd = 3)
