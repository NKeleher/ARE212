ggplot2::scale_y_continuous()
?ggplot2::scale_y_continuous()
# Graphs -----------------------------------------------------------------------
ggplot(all_dt[year(applic_dt) >= 2000],
aes(x = applic_dt, y = N, color = as.factor(month(applic_dt)))) +
geom_point() +
xlab("Day of sample") +
ylab("PUR count") +
theme_pander() +
scale_y_continuous(labels = scales::comma) +
scale_color_viridis(discrete = T, option = "C", begin = 0.2, end = 0.9)
# Graphs -----------------------------------------------------------------------
ggplot(all_dt[year(applic_dt) >= 2000],
aes(x = applic_dt, y = N, color = as.factor(month(applic_dt)))) +
geom_point() +
xlab("Day of sample") +
ylab("PUR count") +
theme_pander() +
scale_y_continuous(labels = scales::comma) +
scale_color_viridis(discrete = T, option = "C", begin = 0.2, end = 0.9) +
theme(legend.postion = "none")
# Graphs -----------------------------------------------------------------------
ggplot(all_dt[year(applic_dt) >= 2000],
aes(x = applic_dt, y = N, color = as.factor(month(applic_dt)))) +
geom_point() +
xlab("Day of sample") +
ylab("PUR count") +
theme_pander() +
scale_y_continuous(labels = scales::comma) +
scale_color_viridis(discrete = T, option = "C", begin = 0.2, end = 0.9) +
theme(dlegend.position = "none")
# Graphs -----------------------------------------------------------------------
ggplot(all_dt[year(applic_dt) >= 2000],
aes(x = applic_dt, y = N, color = as.factor(month(applic_dt)))) +
geom_point() +
xlab("Day of sample") +
ylab("PUR count") +
theme_pander() +
scale_y_continuous(labels = scales::comma) +
scale_color_viridis(discrete = T, option = "C", begin = 0.2, end = 0.9) +
theme(legend.position = "none")
ggplot(all_dt[year(applic_dt) > 2000, .(N = sum(N, na.rm = T)), by = floor_date(applic_dt, unit = "quarter")],
aes(x = floor_date, y = N / 1e5, color = as.factor(year(floor_date)))) +
geom_point() +
geom_line() +
xlab("Quarter of sample") +
ylab("PUR count (in 100,000s)") +
theme_pander() +
scale_color_viridis("Year", discrete = T, option = "C", begin = 0.2, end = 0.9)
ggplot(all_dt[, .(N = sum(N)), by = day(applic_dt)]) +
geom_histogram(aes(x = day, y = N, fill = day %>% as.factor()), stat = "identity") +
theme_pander() +
theme(legend.position = "none") +
xlab("Day of month") +
ylab("PUR count") +
scale_y_continuous(labels = . %>% format(big.mark = ",")) +
scale_fill_viridis("Day", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[, .(N = sum(N)), by = day(applic_dt)]) +
geom_histogram(aes(x = day, y = N, fill = day %>% as.factor()), stat = "identity") +
theme_pander() +
theme(legend.position = "none") +
xlab("Day of month") +
ylab("PUR count") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Day", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[year(applic_dt) > 2000, .(N = sum(N, na.rm = T)), by = floor_date(applic_dt, unit = "quarter")],
aes(x = floor_date, y = N, color = as.factor(year(floor_date)))) +
geom_point() +
geom_line() +
xlab("Quarter of sample") +
ylab("PUR count") +
theme_pander() +
scale_color_viridis("Year", discrete = T, option = "C", begin = 0.2, end = 0.9)
ggplot(all_dt[year(applic_dt) > 2000, .(N = sum(N, na.rm = T)), by = floor_date(applic_dt, unit = "quarter")],
aes(x = floor_date, y = N, color = as.factor(year(floor_date)))) +
geom_point() +
geom_line() +
xlab("Quarter of sample") +
ylab("PUR count") +
theme_pander() +
scale_y_continuous(labels = scales::comma) +
scale_color_viridis("Year", discrete = T, option = "C", begin = 0.2, end = 0.9)
ggplot(all_dt[, .(N = sum(N)), by = week(applic_dt)]) +
geom_histogram(aes(x = week, y = N, fill = week %>% as.factor()), stat = "identity") +
xlab("Week of year") +
ylab("Count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Week", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[!is.na(applic_dt), .(N = sum(N)), by = wday(applic_dt, label = T)]) +
geom_histogram(aes(x = wday, y = N / 1e6, fill = wday %>% as.factor()), stat = "identity") +
xlab("Day of week") +
ylab("Count (in millions)") +
theme_pander() +
theme(legend.position = "none") +
scale_fill_viridis("Week day", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[!is.na(applic_dt), .(N = sum(N)), by = wday(applic_dt, label = T)]) +
geom_histogram(aes(x = wday, y = N, fill = wday %>% as.factor()), stat = "identity") +
xlab("Day of week") +
ylab("PUR Count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Week day", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[!is.na(applic_dt), .(N = sum(N)), by = month(applic_dt, label = T)]) +
geom_histogram(aes(x = month, y = N, fill = month %>% as.factor()), stat = "identity") +
theme_pander() +
theme(legend.position = "none") +
scale_fill_viridis("Month", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[!is.na(applic_dt), .(N = sum(N)), by = month(applic_dt, label = T)]) +
geom_histogram(aes(x = month, y = N, fill = month %>% as.factor()), stat = "identity") +
theme_pander() +
theme(legend.position = "none") +
scale_fill_viridis("Month", discrete = T, option = "B", begin = 0.05, end = 0.95) +
scale_y_continuous(labels = scales::comma) +
ggplot(all_dt[!is.na(applic_dt), .(N = sum(N)), by = month(applic_dt, label = T)]) +
geom_histogram(aes(x = month, y = N, fill = month %>% as.factor()), stat = "identity") +
theme_pander() +
theme(legend.position = "none") +
scale_fill_viridis("Month", discrete = T, option = "B", begin = 0.05, end = 0.95) +
scale_y_continuous(labels = scales::comma)
ggplot(all_dt[!is.na(applic_dt), .(N = sum(N)), by = month(applic_dt, label = T)]) +
geom_histogram(aes(x = month, y = N, fill = month %>% as.factor()), stat = "identity") +
xlab("Month of year") +
ylab("PUR count") +
theme_pander() +
theme(legend.position = "none") +
scale_fill_viridis("Month", discrete = T, option = "B", begin = 0.05, end = 0.95) +
scale_y_continuous(labels = scales::comma)
ggplot(all_dt[, .(N = sum(N)), by = day(applic_dt)]) +
geom_histogram(aes(x = day, y = N, fill = day %>% as.factor()), stat = "identity") +
xlab("Day of month") +
ylab("PUR count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Day", discrete = T, option = "B", begin = 0.05, end = 0.95)
# Graphs -----------------------------------------------------------------------
ggplot(all_dt[year(applic_dt) >= 2000],
aes(x = applic_dt, y = N, color = as.factor(month(applic_dt)))) +
geom_point() +
xlab("Day of sample") +
ylab("PUR count") +
theme_pander() +
scale_y_continuous(labels = scales::comma) +
scale_color_viridis(discrete = T, option = "C", begin = 0.2, end = 0.9) +
theme(legend.position = "none")
ggplot(all_dt[, .(N = sum(N)), by = day(applic_dt)]) +
geom_histogram(aes(x = day, y = N, fill = day %>% as.factor()), stat = "identity") +
xlab("Day of month") +
ylab("PUR count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Day", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[year(applic_dt) > 2000, .(N = sum(N, na.rm = T)), by = floor_date(applic_dt, unit = "quarter")],
aes(x = floor_date, y = N, color = as.factor(year(floor_date)))) +
geom_point() +
geom_line() +
xlab("Quarter of sample") +
ylab("PUR Count") +
theme_pander() +
scale_y_continuous(labels = scales::comma) +
scale_color_viridis("Year", discrete = T, option = "C", begin = 0.2, end = 0.9)
ggplot(all_dt[, .(N = sum(N)), by = day(applic_dt)]) +
geom_histogram(aes(x = day, y = N, fill = day %>% as.factor()), stat = "identity") +
xlab("Day of month") +
ylab("PUR count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Day", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[, .(N = sum(N)), by = week(applic_dt)]) +
geom_histogram(aes(x = week, y = N, fill = week %>% as.factor()), stat = "identity") +
xlab("Week of year") +
ylab("Count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Week", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[!is.na(applic_dt), .(N = sum(N)), by = wday(applic_dt, label = T)]) +
geom_histogram(aes(x = wday, y = N, fill = wday %>% as.factor()), stat = "identity") +
xlab("Day of week") +
ylab("PUR Count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Week day", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[, .(N = sum(N)), by = week(applic_dt)]) +
geom_histogram(aes(x = week, y = N, fill = week %>% as.factor()), stat = "identity") +
xlab("Week of year") +
ylab("PUR count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Week", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(all_dt[year(applic_dt) > 2000, .(N = sum(N, na.rm = T)), by = floor_date(applic_dt, unit = "quarter")],
aes(x = floor_date, y = N, color = as.factor(year(floor_date)))) +
geom_point() +
geom_line() +
xlab("Quarter of sample") +
ylab("PUR count") +
theme_pander() +
scale_y_continuous(labels = scales::comma) +
scale_color_viridis("Year", discrete = T, option = "C", begin = 0.2, end = 0.9)
# Graphs -----------------------------------------------------------------------
ggplot(chl_dt[year(applic_dt) >= 2000],
aes(x = applic_dt, y = N, color = as.factor(month(applic_dt)))) +
geom_point() +
xlab("Day of sample") +
ylab("PUR count") +
theme_pander() +
scale_y_continuous(labels = scales::comma) +
scale_color_viridis(discrete = T, option = "C", begin = 0.2, end = 0.9) +
theme(legend.position = "none")
ggplot(chl_dt[year(applic_dt) > 2000, .(N = sum(N, na.rm = T)), by = floor_date(applic_dt, unit = "quarter")],
aes(x = floor_date, y = N, color = as.factor(year(floor_date)))) +
geom_point() +
geom_line() +
xlab("Quarter of sample") +
ylab("PUR count") +
theme_pander() +
scale_y_continuous(labels = scales::comma) +
scale_color_viridis("Year", discrete = T, option = "C", begin = 0.2, end = 0.9)
ggplot(chl_dt[, .(N = sum(N)), by = day(applic_dt)]) +
geom_histogram(aes(x = day, y = N, fill = day %>% as.factor()), stat = "identity") +
xlab("Day of month") +
ylab("PUR count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Day", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(chl_dt[, .(N = sum(N)), by = week(applic_dt)]) +
geom_histogram(aes(x = week, y = N, fill = week %>% as.factor()), stat = "identity") +
xlab("Week of year") +
ylab("PUR count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Week", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(chl_dt[!is.na(applic_dt), .(N = sum(N)), by = wday(applic_dt, label = T)]) +
geom_histogram(aes(x = wday, y = N, fill = wday %>% as.factor()), stat = "identity") +
xlab("Day of week") +
ylab("PUR Count") +
theme_pander() +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::comma) +
scale_fill_viridis("Week day", discrete = T, option = "B", begin = 0.05, end = 0.95)
ggplot(chl_dt[!is.na(applic_dt), .(N = sum(N)), by = month(applic_dt, label = T)]) +
geom_histogram(aes(x = month, y = N, fill = month %>% as.factor()), stat = "identity") +
xlab("Month of year") +
ylab("PUR count") +
theme_pander() +
theme(legend.position = "none") +
scale_fill_viridis("Month", discrete = T, option = "B", begin = 0.05, end = 0.95) +
scale_y_continuous(labels = scales::comma)
# Setup ------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(rmapshaper, sp, rgdal, rgeos, data.table, magrittr)
# Define directories
dir_misc    <- "/Users/edwardarubin/Dropbox/Research/MyProjects/Miscellaneous/"
dir_project <- dir_misc %>% paste0("CensusShapefiles/")
dir_shp     <- dir_project %>%
paste0("DataSpatial/nhgis0018_shapefile_tl2008_us_county_1950")
# Load data --------------------------------------------------------------------
# Load
us_shp <- readOGR(dsn = dir_shp, layer = "US_county_1950_conflated")
# # Look at data
# us_shp@data %>% head()
# # Take a subset
# sub_shp <- subset(us_shp, STATENAM %in% c("Alabama", "Tennessee"))
# # Re-project to get to lat-lon
# sub_shp <- spTransform(sub_shp, CRS("+proj=longlat +datum=WGS84"))
dir_misc
dir_shp
# Setup ------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(rmapshaper, sp, rgdal, rgeos, sf, data.table, readr, magrittr)
# Define directories
dir_misc <- "/Users/edwardarubin/Dropbox/Research/MyProjects/Miscellaneous/"
dir_project <- dir_misc %>% paste0("CensusShapefiles/")
dir_raw <- dir_project %>% paste0("DataRaw/")
dir_shp <- dir_project %>% paste0("DataSpatial/")
dir_1950 <- dir_shp %>% paste0("nhgis0024_shapefile_tl2008_us_county_1950/")
# Load spatial data ------------------------------------------------------------
# Load NC VRA counties
nc_dt <- paste0(dir_raw, "ncVra.csv") %>% read_csv() %>% data.table()
# Split NC into VR and non-VRA
nc_vra <- nc_dt[covered == 1, county]
nc_non <- nc_dt[covered == 0, county]
# Load the 1950 county shapefile
us_shp <- readOGR(dsn = dir_1950, layer = "US_county_1950_conflated")
# # Look at data
# us_shp %>% head()
# # Take a subset
# sub_shp <- subset(us_shp, STATENAM %in% c("Alabama", "Tennessee"))
# # Re-project to get to lat-lon
# sub_shp <- spTransform(sub_shp, CRS("+proj=longlat +datum=WGS84"))
# Setup ------------------------------------------------------------------------
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(rmapshaper, sp, rgdal, rgeos, sf, data.table, readr, magrittr)
# Define directories
dir_misc <- "/Users/edwardarubin/Dropbox/Research/MyProjects/Miscellaneous/"
dir_project <- dir_misc %>% paste0("CensusShapefiles/")
dir_raw <- dir_project %>% paste0("DataRaw/")
dir_shp <- dir_project %>% paste0("DataSpatial/")
dir_1950 <- dir_shp %>% paste0("nhgis0024_shapefile_tl2008_us_county_1950/")
# Load spatial data ------------------------------------------------------------
# Load the 1950 county shapefile
us_shp <- readOGR(dsn = dir_1950, layer = "US_county_1950_conflated")
# # Look at data
# us_shp %>% head()
# # Take a subset
# sub_shp <- subset(us_shp, STATENAM %in% c("Alabama", "Tennessee"))
# # Re-project to get to lat-lon
# sub_shp <- spTransform(sub_shp, CRS("+proj=longlat +datum=WGS84"))
# Define states and counties ---------------------------------------------------
# Load NC VRA counties
nc_dt <- paste0(dir_raw, "ncVra.csv") %>% read_csv() %>% data.table()
# Split NC into VR and non-VRA
nc_vra <- nc_dt[covered == 1, county]
nc_non <- nc_dt[covered == 0, county]
# Define the VRA states
vra_1965 <- c("Alabama", "Georgia", "Louisiana", "Mississippi",
"South Carolina", "Virginia")
vra_1975 <- c("Arizona", "Texas")
vra_all <- c(vra_1965, vra_1975)
vra_shp <- subset(us_shp,
(STATENAM %in% vra_all) |
((STATENAM == "North Carolina") & (NHGISNAM %in% nc_vra))
) %>% gUnaryUnion()
# Create non-VRA subset
non_shp <- subset(us_shp,
!(STATENAM %in% c(vra_all, "North Carolina", "Alaska Territory",
"Hawaii Territory") |
((STATENAM == "North Carolina") & (NHGISNAM %in% nc_non))
)) %>% gUnaryUnion()
# Take union of all US states
all_shp <- subset(us_shp,
!(STATENAM %in% c("Alaska Territory", "Hawaii Territory"))) %>%
gUnaryUnion()
# Define the VRA boundary
vra_line <- gDifference(
as(vra_shp, "SpatialLines"),
as(all_shp, "SpatialLines"),
byid = T)
tmp_df <- data.frame(length = gLength(vra_line))
row.names(tmp_df) <- vra_line@lines[[1]]@ID
vra_sldf <- SpatialLinesDataFrame(sl = vra_line, data = tmp_df)
rm(tmp_df)
tmp_df <- data.frame(area = gArea(all_shp) / 1e6)
row.names(tmp_df) <- all_shp@polygons[[1]]@ID
all_spdf <- SpatialPolygonsDataFrame(Sr = all_shp, data = tmp_df)
rm(tmp_df)
tmp_df <- data.frame(area = gArea(non_shp) / 1e6)
row.names(tmp_df) <- non_shp@polygons[[1]]@ID
non_spdf <- SpatialPolygonsDataFrame(Sr = non_shp, data = tmp_df)
rm(tmp_df)
tmp_df <- data.frame(area = gArea(vra_shp) / 1e6)
row.names(tmp_df) <- vra_shp@polygons[[1]]@ID
vra_spdf <- SpatialPolygonsDataFrame(Sr = vra_shp, data = tmp_df)
rm(tmp_df)
vra_spdf %>% head
vra_spdf %>% head
tmp_df %>% head
dir_new <- paste0(dir_project, "DataSpatial/Test")
dir.create(dir_new)
dir.create(paste0(dir_new, "/vra_line"))
dir.create(paste0(dir_new, "/vra_shp"))
dir.create(paste0(dir_new, "/non_shp"))
dir.create(paste0(dir_new, "/all_shp"))
writeOGR(
obj = vra_sldf,
dsn = paste0(dir_new, "/vra_line"),
layer = "vra_line",
driver = "ESRI Shapefile")
# Save the shape files
writeOGR(
obj = all_spdf,
dsn = paste0(dir_new, "/all_shp"),
layer = "all_shp",
driver = "ESRI Shapefile",
overwrite_layer = T)
writeOGR(
obj = non_spdf,
dsn = paste0(dir_new, "/non_shp"),
layer = "non_shp",
driver = "ESRI Shapefile",
overwrite_layer = T)
writeOGR(
obj = vra_spdf,
dsn = paste0(dir_new, "/vra_shp"),
layer = "vra_shp",
driver = "ESRI Shapefile",
overwrite_layer = T)
# Setup ----
# Options
options(stringsAsFactors = F)
# Packages
library(pacman)
p_load(dplyr, magrittr, parallel, ggplot2, ggthemes, viridis, lfe)
# Directory
setwd("/Users/edwardarubin/Dropbox/Teaching/ARE212/Section07")
# My ggplot2 theme
theme_ed <- theme(
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_rect(fill = NA, color = "grey75"),
axis.ticks = element_line(color = "grey85"),
panel.grid.major = element_line(color = "grey95", size = 0.2),
panel.grid.minor = element_line(color = "grey95", size = 0.2),
legend.key = element_blank())
# Functions ----
# Function to convert tibble, data.frame, or tbl_df to matrix
to_matrix <- function(the_df, vars) {
# Create a matrix from variables in var
new_mat <- the_df %>%
# Select the columns given in 'vars'
select_(.dots = vars) %>%
# Convert to matrix
as.matrix()
# Return 'new_mat'
return(new_mat)
}
# Function for OLS coefficient estimates
b_ols <- function(y, X) {
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# Return beta_hat
return(beta_hat)
}
# Simulation population ----
# Set the seed
set.seed(12345)
# Set population size, N
N <- 1e5
# Set alpha and beta
alpha <- 0.5
beta <- 1.5
# Create the population data: intercept (i) and X
pop_df <- data.frame(
i = 1,
x = runif(n = N, min = 0, max = 2000)
) %>% tbl_df()
# Generate error term, e
pop_df %<>% mutate(
e = rnorm(N, mean = 0, sd = sqrt(4 * x^2)))
# Calculate y
pop_df %<>% mutate(y = alpha + beta * x + e)
pop_df %<>% mutate(w = 10/x)
# Apply weights
pop_df %<>% mutate(
y_w = y * w,
i_w = i * w,
x_w = x * w)
View(pop_df)
?sample_n
# Single iteration function ----
# Function for a single iteration of the simulation
one_run <- function(iter, population) {
# Sample 1000 rows from the population
sample_df <- sample_n(tbl = population, size = 1000)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y"),
X = to_matrix(sample_df, c("i", "x")))
# Calculate the WLS coef. (using weighted variables)
coef_wls <- b_ols(
y = to_matrix(sample_df, "y_w"),
X = to_matrix(sample_df, c("i_w", "x_w")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(c(coef_ols, coef_wls)),
param  = rep(c("int", "coef"), 2),
method = rep(c("ols", "wls"), each = 2),
iter   = iter
)
# Return the data.frame
return(coef_df)
}
# Run the simulation (parallelized) ----
# Make the cluster
cl <- makeCluster(4)
# Load functions on the cluster
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "pop_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
# Set seed in parallel
clusterSetRNGStream(cl, 12345)
# Run the simulation 10K times
sim_df <- parLapply(
cl = cl,
X = 1:1e3,
fun = one_run,
population = pop_df) %>% bind_rows() %>% tbl_df()
# Stop the cluster
stopCluster(cl)
sim_df %>% head
