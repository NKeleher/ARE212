days2 = tmp$days2,
allow_daily1 = tmp$allow_daily1,
allow_daily2 = tmp$allow_daily2,
p1_b = tmp$p1_b,
p1_e = tmp$p1_e,
p2_b = tmp$p2_b,
p2_e = tmp$p2_e,
p1_b_care = tmp$p1_b_care,
p1_e_care = tmp$p1_e_care,
p2_b_care = tmp$p2_b_care,
p2_e_care = tmp$p2_e_care,
q_total = tmp$q_total,
true_bill_total = tmp$true_bill_total)
tmp
results
results[[1]]
results[[2]]
require(data.table)
# Functions to calculate total bill --------------------------------------------
# Split two-period bill using non-CARE prices
split_bill <- function(q1, days1, days2, allow_daily1, allow_daily2,
p1_b, p1_e, p2_b, p2_e, q_total) {
# bill 1
allow1 <- allow_daily1 * days1
bill1 <- p1_b * min(allow1, q1) + p1_e * max(0, q1 - allow1)
# bill 2
q2 <- q_total - q1
allow2 <- allow_daily2 * days2
bill2 <- p2_b * min(allow2, q2) + p2_e * max(0, q2 - allow2)
# total bill
bill_total <- bill1 + bill2
# Add penalty (1 million) for negative q2 values
# NOTE: q1 will be bounded in the optimization
if (q2 < 0) bill_total <- bill_total + 1e6
if (q2 < 0) message("Negative q2")
return(bill_total)
}
# Split two-period bill using CARE prices
split_bill_care <- function(q1, days1, days2, allow_daily1, allow_daily2,
p1_b_care, p1_e_care, p2_b_care, p2_e_care, q_total) {
# bill 1
allow1 <- allow_daily1 * days1
bill1 <- p1_b_care * min(allow1, q1) + p1_e_care * max(0, q1 - allow1)
# bill 2
q2 <- q_total - q1
allow2 <- allow_daily2 * days2
bill2 <- p2_b_care * min(allow2, q2) + p2_e_care * max(0, q2 - allow2)
# total bill
bill_total <- bill1 + bill2
# Add penalty (1 million) for negative q2 values
# NOTE: q1 will be bounded in the optimization
if (q2 < 0) bill_total <- bill_total + 1e6
if (q2 < 0) message("Negative q2")
return(bill_total)
}
# Functions to calculate abs. error --------------------------------------------
# Calculate the abs. error for a non-CARE bill
calc_bills <- function(q1, days1, days2, allow_daily1, allow_daily2,
p1_b, p1_e, p2_b, p2_e, q_total, true_bill_total) {
# Calculate the total bill
bill_total <- split_bill(q1, days1, days2, allow_daily1, allow_daily2,
p1_b, p1_e, p2_b, p2_e, q_total)
# Calculate the abs. error for the bill
abs_error <- abs(bill_total - true_bill_total)
# Return the absolute error
return(abs_error)
}
# Calculate the abs. error for a CARE bill
calc_bills_care <- function(q1, days1, days2, allow_daily1, allow_daily2,
p1_b_care, p1_e_care, p2_b_care, p2_e_care, q_total, true_bill_total) {
# Calculate the total bill
bill_total <- split_bill(q1, days1, days2, allow_daily1, allow_daily2,
p1_b_care, p1_e_care, p2_b_care, p2_e_care, q_total)
# Calculate the abs. error for the bill
abs_error <- abs(bill_total - true_bill_total)
# Return the absolute error
return(abs_error)
}
# Functions to minimize abs. error ---------------------------------------------
# Minimize the abs. error from splitting bills
min_split <- function(days1, days2, allow_daily1, allow_daily2,
p1_b, p1_e, p2_b, p2_e, p1_b_care, p1_e_care, p2_b_care, p2_e_care,
q_total, true_bill_total) {
# Minimize calc_bills over interval [0, q_total]
result_noncare <- optimize(
f = calc_bills,
interval = c(0, q_total),
maximum = F,
days1, days2, allow_daily1, allow_daily2,
p1_b, p1_e, p2_b, p2_e, q_total, true_bill_total)
# Minimize calc_bills_care over interval [0, q_total]
result_care <- optimize(
f = calc_bills_care,
interval = c(0, q_total),
maximum = F,
days1, days2, allow_daily1, allow_daily2,
p1_b_care, p1_e_care, p2_b_care, p2_e_care, q_total, true_bill_total)
# Find which result has the minimum absolute error
care <- (result_care$objective < result_noncare$objective)
# Grab our best guess at q1 based upon 'care'
q1 <- ifelse(care, result_care$minimum, result_noncare$minimum)
# Return a transposed list with care and q1
return(data.table(care, q1))
}
# Tests ------------------------------------------------------------------------
# Test the function with a single set of parameters
# min_split(
#   days1 = 21,
#   days2 = 9,
#   allow_daily1 = 1.79,
#   allow_daily2 = 1.79,
#   p1_b = 0.91778,
#   p1_e = 1.15573,
#   p2_b = 0.99116,
#   p2_e = 1.2433,
#   p1_b_care = 0.91778 * 0.8,
#   p1_e_care = 1.15573 * 0.8,
#   p2_b_care = 0.99116 * 0.8,
#   p2_e_care = 1.2433 * 0.8,
#   q_total = 52,
#   true_bill_total = 41.87)
# Test the function with single set of parameters
results <- mapply(
FUN = min_split,
SIMPLIFY = F,
days1 = tmp$days1,
days2 = tmp$days2,
allow_daily1 = tmp$allow_daily1,
allow_daily2 = tmp$allow_daily2,
p1_b = tmp$p1_b,
p1_e = tmp$p1_e,
p2_b = tmp$p2_b,
p2_e = tmp$p2_e,
p1_b_care = tmp$p1_b_care,
p1_e_care = tmp$p1_e_care,
p2_b_care = tmp$p2_b_care,
p2_e_care = tmp$p2_e_care,
q_total = tmp$q_total,
true_bill_total = tmp$true_bill_total)
results <- mapply(
FUN = min_split,
SIMPLIFY = F,
days1 = tmp$days1,
days2 = tmp$days2,
allow_daily1 = tmp$allow_daily1,
allow_daily2 = tmp$allow_daily2,
p1_b = tmp$p1_b,
p1_e = tmp$p1_e,
p2_b = tmp$p2_b,
p2_e = tmp$p2_e,
p1_b_care = tmp$p1_b_care,
p1_e_care = tmp$p1_e_care,
p2_b_care = tmp$p2_b_care,
p2_e_care = tmp$p2_e_care,
q_total = tmp$q_total,
true_bill_total = tmp$true_bill_total)
results
results <- mapply(
FUN = min_split,
SIMPLIFY = F,
days1 = tmp$days1,
days2 = tmp$days2,
allow_daily1 = tmp$allow_daily1,
allow_daily2 = tmp$allow_daily2,
p1_b = tmp$p1_b,
p1_e = tmp$p1_e,
p2_b = tmp$p2_b,
p2_e = tmp$p2_e,
p1_b_care = tmp$p1_b_care,
p1_e_care = tmp$p1_e_care,
p2_b_care = tmp$p2_b_care,
p2_e_care = tmp$p2_e_care,
q_total = tmp$q_total,
true_bill_total = tmp$true_bill_total) %>% rbindlist()
results
results[,1]
table(tmp[,1] == results[,1])
table(tmp[,1] == results[,1])
tmp[,1]
results
results[,2]
tmp[,q1] - results[,2]
summary(tmp[,q1] - results[,2])
results[,2]
results %>% head
results[q1 == max(q1)]
results[q1 == max(q1), .N]
results[, q1 == max(q1)]
which(results[, q1 == max(q1)])
results[7,]
View(tmp[7,])
20 * 12.32
20 * .7789996
2- * 0.6161895
20 * 0.6161895
11 * 0.7789996
results[7,]
12.32379 * 0.5240496 + (24-12.32379) * 0.6012366
tmp[care == F]
tmp[care == F][1,] %>% View
0.08371455 * 26
0.08371455 * 20
6 * 0.9438194
6 * 0.9438194 * 1.075878 + (7 - 6 * 0.9438194) * 1.156174
tmp[care == F][2,] %>% View
tmp[care == F & q1 < allow1][1,] %>% View
tmp[care == F & q1 < allow1][2,] %>% View
24 * 0.4780515
0.4780515 * 10
4 * 0.6337389
tmp[care == T & q1 < allow1][2,] %>% View
1.017095 * 15
10 * 0.5039697
20 * 0.6161895
20 * 0.6161895 * (0.5240496) + (24 - 20 * 0.6161895) * 0.6012366
n <- 2e1
library(data.table)
library(magrittr)
set.seed(1234)
tmp <- data.table(
care  = sample(c(T,F), n, replace = T),
days  = sample(20:40, n, replace = T),
days1 = sample(0:30, n, replace = T)
)
tmp[days1 > days, days := days1]
tmp[, `:=`(
days2        = days - days1,
allow_daily1 = runif(n, min = 0, max = 2),
allow_daily2 = runif(n, min = 0, max = 2),
p1_b         = runif(n, min = 0.5, max = 1.5),
p1_e         = runif(n, min = 0.5, max = 1.5),
step1        = runif(n, min = 0.1, max = 0.5),
p2_b         = runif(n, min = 0.5, max = 1.5),
p2_e         = runif(n, min = 0.5, max = 1.5),
step2        = runif(n, min = 0.1, max = 0.5)
)]
tmp[, `:=`(
p1_e      = p1_e + step1,
p2_e      = p2_e + step2,
p1_b_care = p1_b * 0.8,
p1_e_care = p1_e * 0.8,
p2_b_care = p2_b * 0.8,
p2_e_care = p2_e * 0.8,
q1        = sample(0:30, n, replace = T),
q2        = sample(0:30, n, replace = T)
)]
tmp[, `:=`(
allow1 = days1 * allow_daily1,
allow2 = days2 * allow_daily2
)]
tmp[q1 <= allow1, bill1 := q1 * ((1-care) * p1_b + care * p1_b_care)]
tmp[q2 <= allow2, bill2 := q2 * ((1-care) * p2_b + care * p2_b_care)]
tmp[q1 > allow1, bill1  :=
allow1 * ((1-care) * p1_b + care * p1_b_care) +
(q1 - allow1) * ((1-care) * p1_e + care * p1_e_care)]
tmp[q2 > allow2, bill2  :=
allow2 * ((1-care) * p2_b + care * p2_b_care) +
(q2 - allow2) * ((1-care) * p2_e + care * p2_e_care)]
tmp[, `:=`(
q_total = q1 + q2,
true_bill_total = bill1 + bill2
)]
results <- mapply(
FUN = min_split,
SIMPLIFY = F,
days1 = tmp$days1,
days2 = tmp$days2,
allow_daily1 = tmp$allow_daily1,
allow_daily2 = tmp$allow_daily2,
p1_b = tmp$p1_b,
p1_e = tmp$p1_e,
p2_b = tmp$p2_b,
p2_e = tmp$p2_e,
p1_b_care = tmp$p1_b_care,
p1_e_care = tmp$p1_e_care,
p2_b_care = tmp$p2_b_care,
p2_e_care = tmp$p2_e_care,
q_total = tmp$q_total,
true_bill_total = tmp$true_bill_total) %>% rbindlist()
results
results
results %>% head
table(results[,1] == tmp[, care])
summary(tmp[,q1] - results[,q1])
hist(tmp[,q1] - results[,q1])
which(abs(tmp[,q1] - results[,q1])>1)
tmp[c(12,19)] %>% View
# Setup ----
# Options
options(stringsAsFactors = F)
# Packages
library(dplyr)
library(magrittr)
library(parallel)
library(ggplot2)
library(ggthemes)
library(viridis)
library(lfe)
# Directory
setwd("/Users/edwardarubin/Dropbox/Teaching/ARE212/Section07")
# My ggplot2 theme
theme_ed <- theme(
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_rect(fill = NA, color = "grey75"),
axis.ticks = element_line(color = "grey85"),
panel.grid.major = element_line(color = "grey95", size = 0.2),
panel.grid.minor = element_line(color = "grey95", size = 0.2),
legend.key = element_blank())
# Functions ----
# Function to convert tibble, data.frame, or tbl_df to matrix
to_matrix <- function(the_df, vars) {
# Create a matrix from variables in var
new_mat <- the_df %>%
# Select the columns given in 'vars'
select_(.dots = vars) %>%
# Convert to matrix
as.matrix()
# Return 'new_mat'
return(new_mat)
}
# Function for OLS coefficient estimates
b_ols <- function(y, X) {
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# Return beta_hat
return(beta_hat)
}
set.seed(12345)
N <- 1e5
alpha <- 0.5
beta <- 1.5
pop_df <- data.frame(
i = 1,
x = runif(n = N, min = 0, max = 2000)
) %>% tbl_df()
pop_df
pop_df %<>% mutate(
e = rnorm(N, mean = 0, sd = sqrt(4 * x^2)))
pop_df %<>% mutate(y = alpha + beta * x + e)
pop_df
pop_df %<>% mutate(w = 10/x)
pop_df
pop_df %<>% mutate(
y_w = y * w,
i_w = i * w,
x_w = x * w)
rep(c("int", "coef"), 2)
rep(c("ols", "wls"), each = 2)
# Single iteration function ----
# Function for a single iteration of the simulation
one_run <- function(iter, population) {
# Sample 1000 rows from the population
sample_df <- sample_n(tbl = population, size = 1000)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y"),
X = to_matrix(sample_df, c("i", "x")))
# Calculate the WLS coef. (using weighted variables)
coef_wls <- b_ols(
y = to_matrix(sample_df, "y_w"),
X = to_matrix(sample_df, c("i_w", "x_w")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(c(coef_ols, coef_wls)),
param  = rep(c("int", "coef"), 2),
method = rep(c("ols", "wls"), each = 2),
iter   = iter
)
# Return the data.frame
return(coef_df)
}
one_run(1, pop_df)
set.seed(12345)
cl <- makeCluster(4)
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "pop_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
clusterSetRNGStream(cl, 12345)
# Run the simulation 10K times
sim_df <- parLapply(
cl = cl,
X = 1:1e4,
fun = one_run,
population = pop_df) %>% bind_rows() %>% tbl_df()
stopCluster(cl)
sim_Df
sim_df
# The plot
ggplot(data = filter(sim_df, param == "coef"), aes(x = est)) +
geom_vline(xintercept = 1.5, color = "grey70", size = 0.75) +
geom_density(aes(fill = method, color = method), alpha = 0.7) +
xlab(expression(paste("Estimate for ", beta))) +
ylab("Density") +
ggtitle("Simulation comparing coefficients from OLS and WLS") +
scale_fill_viridis("Method", labels = c("OLS", "WLS"),
discrete = T, end = 0.95) +
scale_color_viridis("Method", labels = c("OLS", "WLS"),
discrete = T, end = 0.95) +
theme_ed
sim_df %>%
group_by(param, method) %>%
summarize(mean(est), sd(est))
pop_df %<>% mutate(v = 10/x^2)
pop_df %<>% mutate(
y_v = y * v,
i_v = i * v,
x_v = x * v)
one_run <- function(iter, population) {
# Sample 1000 rows from the population
sample_df <- sample_n(tbl = population, size = 1000)
# Calculate the OLS coef. (using unweighted variables)
coef_ols <- b_ols(
y = to_matrix(sample_df, "y"),
X = to_matrix(sample_df, c("i", "x")))
# Calculate the WLS coef. (using correctly weighted variables)
coef_wls <- b_ols(
y = to_matrix(sample_df, "y_w"),
X = to_matrix(sample_df, c("i_w", "x_w")))
# Calculate the WLS coef. (using incorrectly weighted variables)
coef_wls_bad <- b_ols(
y = to_matrix(sample_df, "y_v"),
X = to_matrix(sample_df, c("i_v", "x_v")))
# Create a data.frame to return
coef_df <- data.frame(
est    = as.vector(c(coef_ols, coef_wls, coef_wls_bad)),
param  = rep(c("int", "coef"), 3),
method = rep(c("ols", "wls", "wls bad"), each = 2),
iter   = iter
)
# Return the data.frame
return(coef_df)
}
# Run simulation (parallelized) ----
# Make the cluster
cl <- makeCluster(4)
# Load functions on the cluster
clusterEvalQ(cl, {
library(dplyr)
library(magrittr)
})
# Export our data and functions to the cluster
clusterExport(cl, "pop_df")
clusterExport(cl, c("to_matrix", "b_ols", "one_run"))
# Set seed in parallel
clusterSetRNGStream(cl, 12345)
# Run the simulation 10,000 times
miss_df <- parLapply(
cl = cl,
X = 1:1e4,
fun = one_run,
population = pop_df) %>% bind_rows() %>% tbl_df()
# Stop the cluster
stopCluster(cl)
miss_df <- lapply(
X = 1:1e4,
FUN = one_run,
population = pop_df) %>% bind_rows() %>% tbl_df()
miss_df
# Plot results ----
# Plot results
ggplot(data = filter(miss_df, param == "coef"), aes(x = est)) +
geom_vline(xintercept = 1.5, color = "grey70", size = 0.75) +
geom_density(aes(fill = method, color = method), alpha = 0.7) +
xlab(expression(paste("Estimate for ", beta))) +
ylab("Density") +
ggtitle("Simulation comparing coefficients from OLS and WLS",
subtitle = "Allowing for misspecification in WLS") +
scale_fill_viridis("Method",
labels = c("OLS", "WLS", "WLS misspecified"),
discrete = T, end = 0.95, direction = -1) +
scale_color_viridis("Method",
labels = c("OLS", "WLS", "WLS misspecified"),
discrete = T, end = 0.95, direction = -1) +
theme_ed
# Zoom in
ggplot(data = filter(miss_df, param == "coef"), aes(x = est)) +
geom_vline(xintercept = 1.5, color = "grey70", size = 0.75) +
geom_density(aes(fill = method, color = method), alpha = 0.65) +
xlab(expression(paste("Estimate for ", beta))) +
ylab("Density") +
ggtitle("Simulation comparing coefficients from OLS and WLS",
subtitle = "Allowing for misspecification in WLS") +
xlim(1.5 + c(-1,1) * 2) +
scale_fill_viridis("Method",
labels = c("OLS", "WLS", "WLS misspecified"),
discrete = T, end = 0.95, direction = -1) +
scale_color_viridis("Method",
labels = c("OLS", "WLS", "WLS misspecified"),
discrete = T, end = 0.95, direction = -1) +
theme_ed
# Numerical summary
miss_df %>%
group_by(param, method) %>%
summarize(mean(est), sd(est)) %>%
knitr::kable(digits = 4,
col.names = c("Parameter", "Method", "Mean", "Std. Dev."))
# Weighting in 'felm' ----
# 1. 'felm' with our squared weights
felm(y ~ x, data = pop_df, weights = pop_df$w^2)
# 2. 'felm', re-defining our weights
felm(y ~ x, data = pop_df, weights = (10/pop_df$x)^2)
# 3. 'felm' with our transformed variables
felm(y_w ~ -1 + i_w + x_w, data = pop_df)
# 4. Using our 'b_ols' function on the transformed variables
# (As we did in the simulation)
b_ols(y = to_matrix(pop_df, "y_w"),
X = to_matrix(pop_df, c("i_w", "x_w")))
