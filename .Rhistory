# Load Playfair's wheat data
wheat_df <- Wheat %>% tbl_df()
# Drop the rows missing a value
wheat_df %<>% na.omit()
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year)) +
geom_point(aes(y = Wheat, color = "a")) +
geom_line(aes(y = Wheat, color = "a")) +
geom_point(aes(y = Wages, color = "b")) +
geom_line(aes(y = Wages, color = "b")) +
xlab("Year") +
ylab("Shillings") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .9,
labels = c("Price of wheat", "Wages"))
# Load the 'HistData' package
library(HistData)
# Load Playfair's wheat data
wheat_df <- Wheat %>% tbl_df()
# Drop the rows missing a value
wheat_df %<>% na.omit()
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year)) +
geom_point(aes(y = Wheat, color = "a")) +
geom_line(aes(y = Wheat, color = "a")) +
geom_point(aes(y = Wages, color = "b")) +
geom_line(aes(y = Wages, color = "b")) +
xlab("Year") +
ylab("Shillings") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .85,
labels = c("Price of wheat", "Wages"))
# Load the 'HistData' package
library(HistData)
# Load Playfair's wheat data
wheat_df <- Wheat %>% tbl_df()
# Drop the rows missing a value
wheat_df %<>% na.omit()
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year)) +
geom_point(aes(y = Wheat, color = "a")) +
geom_line(aes(y = Wheat, color = "a")) +
geom_point(aes(y = Wages, color = "b")) +
geom_line(aes(y = Wages, color = "b")) +
xlab("Year") +
ylab("Shillings") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8,
labels = c("Price of wheat", "Wages"))
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year)) +
geom_point(aes(y = Wheat, color = "a")) +
geom_line(aes(y = Wheat, color = "a", linetype = "a")) +
geom_point(aes(y = Wages, color = "b")) +
geom_line(aes(y = Wages, color = "b", linetype = "b")) +
xlab("Year") +
ylab("Shillings") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(3, 1),
labels = c("Price of wheat", "Wages")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8,
labels = c("Price of wheat", "Wages")
)
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year)) +
geom_point(aes(y = Wheat, color = "a")) +
geom_line(aes(y = Wheat, color = "a", linetype = "a")) +
geom_point(aes(y = Wages, color = "b")) +
geom_line(aes(y = Wages, color = "b", linetype = "b")) +
xlab("Year") +
ylab("Shillings") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(4, 1),
labels = c("Price of wheat", "Wages")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8,
labels = c("Price of wheat", "Wages")
)
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year)) +
geom_point(aes(y = Wheat, color = "a")) +
geom_line(aes(y = Wheat, color = "a", linetype = "a")) +
geom_point(aes(y = Wages, color = "b")) +
geom_line(aes(y = Wages, color = "b", linetype = "b")) +
xlab("Year") +
ylab("Shillings") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(2, 1),
labels = c("Price of wheat", "Wages")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8,
labels = c("Price of wheat", "Wages")
)
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year)) +
geom_point(aes(y = Wheat, color = "a")) +
geom_line(aes(y = Wheat, color = "a", linetype = "a")) +
geom_point(aes(y = Wages, color = "b")) +
geom_line(aes(y = Wages, color = "b", linetype = "b")) +
xlab("Year") +
ylab("Shillings") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(3, 1),
labels = c("Price of wheat", "Wages")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8,
labels = c("Price of wheat", "Wages")
)
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year)) +
geom_point(aes(y = Wheat, color = "a")) +
geom_line(aes(y = Wheat, color = "a", linetype = "a")) +
geom_point(aes(y = Wages, color = "b")) +
geom_line(aes(y = Wages, color = "b", linetype = "b")) +
xlab("Year") +
ylab("Shillings") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(7, 1),
labels = c("Price of wheat", "Wages")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8,
labels = c("Price of wheat", "Wages")
)
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year)) +
geom_point(aes(y = Wheat, color = "a")) +
geom_line(aes(y = Wheat, color = "a", linetype = "a")) +
geom_point(aes(y = Wages, color = "b")) +
geom_line(aes(y = Wages, color = "b", linetype = "b")) +
xlab("Year") +
ylab("Shillings") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(6, 1),
labels = c("Price of wheat", "Wages")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8,
labels = c("Price of wheat", "Wages")
)
wheat_df
p_load(tidyr, dplyr, lfe, magrittr, ggplot2, viridis, sandwich)
library(HistData)
# Load Playfair's wheat data
# Load the 'HistData' package
library(HistData)
# Load Playfair's wheat data
wheat_df <- Wheat %>% tbl_df()
# Drop the rows missing a value
wheat_df %<>% na.omit()
wheat_df
gather(wheat_df, series, Wheat:Wages)
gather(wheat_df, Year, Series, Wheat:Wages)
gather(wheat_df, Series, Wheat:Wages, Year, )
gather(wheat_df, Series, Wheat:Wages, Year)
?gather
wheat_df
wheat_df %>% gather(Series, Price, Wheat:Wages)
# Load the 'HistData' package
library(HistData)
# Load Playfair's wheat data
wheat_df <- Wheat %>% tbl_df()
# Drop the rows missing a value
wheat_df %<>% na.omit()
# Long to wide table
wheat_df %<>% gather(Series, Price, Wheat:Wages)
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year, y = Price, color = Series)) +
geom_point() +
geom_line(aes(linetype = Series)) +
geom_point() +
geom_line(aes(linetype = Series)) +
xlab("Year") +
ylab("Wage/Price (Shillings)") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(3, 1),
labels = c("Price of wheat", "Wages")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8,
labels = c("Price of wheat", "Wages")
)
ggplot(data = wheat_df, aes(x = Year, y = Price, color = Series, linetype = Series)) +
geom_point() +
geom_line() +
geom_point() +
geom_line() +
xlab("Year") +
ylab("Wage/Price (Shillings)") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(3, 1),
labels = c("Wages", "Price of wheat")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8,
labels = c("Wages", "Price of wheat")
)
?viridis
# Load the 'HistData' package
library(HistData)
# Load Playfair's wheat data
wheat_df <- Wheat %>% tbl_df()
# Drop the rows missing a value
wheat_df %<>% na.omit()
# Long to wide table
wheat_df %<>% gather(Series, Price, Wheat:Wages)
# Playfair's graph
ggplot(data = wheat_df, aes(x = Year, y = Price, color = Series, linetype = Series)) +
geom_point() +
geom_line() +
geom_point() +
geom_line() +
xlab("Year") +
ylab("Wage/Price (Shillings)") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(3, 1),
labels = c("Wages", "Price of wheat")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8, direction = -1,
labels = c("Wages", "Price of wheat")
)
ggplot(data = wheat_df, aes(x = Year, y = Price, color = Series, linetype = Series)) +
geom_point() +
geom_line() +
geom_point() +
geom_line() +
xlab("Year") +
ylab("Wage/Price (Shillings)") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(1, 3),
labels = c("Wages", "Price of wheat")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8, direction = -1,
labels = c("Wages", "Price of wheat")
)
vcov_hac <- function(data, y_var, X_vars, L, intercept = T) {
# Turn data into matrices
y <- to_matrix(data, y_var)
X <- to_matrix(data, X_vars)
# Add intercept
if (intercept == T) X <- cbind(1, X)
# Calculate n and k for degrees of freedom
n <- nrow(X)
k <- ncol(X)
# Estimate coefficients
b <- b_ols(y, X)
# Update names
if (intercept == T) rownames(b)[1] <- "Intercept"
# Calculate OLS residuals
e <- y - X %*% b
# Inverse of X'X
XX_inv <- solve(t(X) %*% X)
# The first term
S_o <- lapply(X = 1:n, FUN = function(i) {
# Define x_i
x_i <- matrix(as.vector(X[i,]), nrow = 1)
# Return x_i' x_i e_i^2
return(t(x_i) %*% x_i * e[i]^2)
}) %>% Reduce(f = "+", x = .)
S_o <- S_o / n
# The second term
S_more <- lapply(X = 1:L, FUN = function(j) {
lapply(X = (j+1):n, FUN = function(t) {
# Grab the rows of X that we need
x_t <- matrix(X[t,], nrow = 1)
x_tj <- matrix(X[t-j,], nrow = 1)
# The calculation
(1 - j / (L + 1)) * e[t] * e[t-j] * (
t(x_t) %*% x_tj + t(x_tj) %*% x_t)
}) %>% Reduce(f = "+", x = .)
}) %>% Reduce(f = "+", x = .)
S_more <- S_more / n
# The full sandwich
S_star <- S_o + S_more
# Return the results
return(n * XX_inv %*% S_star %*% XX_inv)
}
# Choose a lag
the_lag <- ceiling(nrow(wheat_df) / 4)
# The spherical standard errors
vcov_ols(wheat_df, "Wheat", "Wages") %>%
diag() %>% sqrt()
# The standard errors from our HAC robust function
vcov_hac(wheat_df, "Wheat", "Wages", the_lag) %>%
diag() %>% sqrt()
# Estimate the model using 'lm'
wheat_reg <- lm(Wheat ~ Wages, data = wheat_df)
# Use the NeweyWest function
NeweyWest(wheat_reg, lag = the_lag, prewhite = F) %>%
diag() %>% sqrt()
# Playfair's wheat data ----
# Load the 'HistData' package
library(HistData)
# Load Playfair's wheat data
wheat_df <- Wheat %>% tbl_df()
# Drop the rows missing a value
wheat_df %<>% na.omit()
# Long to wide table
wheat_gg <- wheat_df %>% gather(Series, Price, Wheat:Wages)
# Playfair's graph
ggplot(data = wheat_gg, aes(x = Year, y = Price, color = Series, linetype = Series)) +
geom_point() +
geom_line() +
geom_point() +
geom_line() +
xlab("Year") +
ylab("Wage/Price (Shillings)") +
ggtitle("Playfair's wheat and wages time series") +
theme_ed +
scale_linetype_manual("Series",
values = c(1, 3),
labels = c("Wages", "Price of wheat")
) +
scale_color_viridis("Series:",
option = "B",
discrete = T, end = .8, direction = -1,
labels = c("Wages", "Price of wheat")
)
# HAC function ----
vcov_hac <- function(data, y_var, X_vars, L, intercept = T) {
# Turn data into matrices
y <- to_matrix(data, y_var)
X <- to_matrix(data, X_vars)
# Add intercept
if (intercept == T) X <- cbind(1, X)
# Calculate n and k for degrees of freedom
n <- nrow(X)
k <- ncol(X)
# Estimate coefficients
b <- b_ols(y, X)
# Update names
if (intercept == T) rownames(b)[1] <- "Intercept"
# Calculate OLS residuals
e <- y - X %*% b
# Inverse of X'X
XX_inv <- solve(t(X) %*% X)
# The first term
S_o <- lapply(X = 1:n, FUN = function(i) {
# Define x_i
x_i <- matrix(as.vector(X[i,]), nrow = 1)
# Return x_i' x_i e_i^2
return(t(x_i) %*% x_i * e[i]^2)
}) %>% Reduce(f = "+", x = .)
S_o <- S_o / n
# The second term
S_more <- lapply(X = 1:L, FUN = function(j) {
lapply(X = (j+1):n, FUN = function(t) {
# Grab the rows of X that we need
x_t <- matrix(X[t,], nrow = 1)
x_tj <- matrix(X[t-j,], nrow = 1)
# The calculation
(1 - j / (L + 1)) * e[t] * e[t-j] * (
t(x_t) %*% x_tj + t(x_tj) %*% x_t)
}) %>% Reduce(f = "+", x = .)
}) %>% Reduce(f = "+", x = .)
S_more <- S_more / n
# The full sandwich
S_star <- S_o + S_more
# Return the results
return(n * XX_inv %*% S_star %*% XX_inv)
}
# Choose a lag
the_lag <- ceiling(nrow(wheat_df) / 4)
# The spherical standard errors
vcov_ols(wheat_df, "Wheat", "Wages") %>%
diag() %>% sqrt()
# The standard errors from our HAC robust function
vcov_hac(wheat_df, "Wheat", "Wages", the_lag) %>%
diag() %>% sqrt()
# Estimate the model using 'lm'
wheat_reg <- lm(Wheat ~ Wages, data = wheat_df)
# Use the NeweyWest function
NeweyWest(wheat_reg, lag = the_lag, prewhite = F) %>%
diag() %>% sqrt()
# Earthquakes plot ----
ggplot(datasets::quakes, aes(x = long, y = lat)) +
geom_point(aes(size = mag), shape = 21,
fill = "#AA5585", color = "#661141", alpha = 0.25) +
xlab("Longitude") +
ylab("Latitude") +
ggtitle("Earthquakes off Fiji, since 1964") +
scale_size_continuous("Magnitude") +
theme_ed
# Cluster-robust estimator ----
vcov_cluster <- function(data, y_var, X_vars,
cluster_var, intercept = T) {
# Turn data into matrices
y <- to_matrix(data, y_var)
X <- to_matrix(data, X_vars)
# Add intercept
if (intercept == T) X <- cbind(1, X)
# Calculate n and k for degrees of freedom
n <- nrow(X)
k <- ncol(X)
# Estimate coefficients
b <- b_ols(y, X)
# Update names
if (intercept == T) rownames(b)[1] <- "Intercept"
# Calculate OLS residuals
e <- y - X %*% b
# Inverse of X'X
XX_inv <- solve(t(X) %*% X)
# Find the levels of the variable on which we are clustering
cl_levels <- data[, cluster_var] %>% unique() %>% unlist()
# Calculate the meat, iterating over the clusters
meat_hat <- lapply(X = cl_levels, FUN = function(g) {
# Find the row indices for the current cluster
indices <- which(unlist(data[, cluster_var]) == g)
# Grab the current cluster's rows from X and e
X_g <- X[indices,]
e_g <- e[indices] %>% matrix(ncol = 1)
# Calculate this cluster's part of the meat estimate
return(t(X_g) %*% e_g %*% t(e_g) %*% X_g)
}) %>% Reduce(f = "+", x = .) / n
# Find the number of clusters
G <- length(cl_levels)
# Degrees-of-freedom correction
df_c <- G/(G-1) * (n-1)/(n-k)
# Return the results
return(df_c * n * XX_inv %*% meat_hat %*% XX_inv)
}
library(robustbase)
nox_df <- NOxEmissions %>% tbl_df()
names(nox_df) <- c("date", "log_nox", "log_nox_cars", "wind")
vcov_cluster(
data = nox_df,
y_var = "log_nox",
X_vars = "wind",
cluster_var = "date") %>%
diag() %>% sqrt()
felm(log_nox ~ wind | 0 | 0 | date, data = nox_df) %>%
summary()
our_table <- ols(nox_df, "log_nox", "wind")[, 1:3]
our_table$effect <- c("Intercept", "Wind")
se_white <- vcov_white(nox_df, "log_nox", "wind") %>%
diag() %>% sqrt()
se_cluster <- vcov_cluster(nox_df, "log_nox", "wind", "date") %>%
diag() %>% sqrt()
our_table %<>% mutate(se_white, se_cluster)
knitr::kable(our_table,
col.names = c("Effect", "Coef.", "S.E. (Sph. Errors)",
"S.E. (Het. Robust)", "S.E. (Cluster Robust)"),
digits = c(3, 3, 4, 4, 4),
align = c("l", rep("r", 4)),
caption = "Comparing standard errors")
lm(Wheat ~ Wages, data = wheat_df)
lm(Wheat ~ Wages, data = wheat_df) %>% summary
lm(Wheat ~ Wages, data = bind_rows(wheat_df, wheat_df)) %>% summary
sqrt(1/2)
cd /Users/edwardarubin/Dropbox/Teaching/ARE212
library(rmarkdown)
setwd("/Users/edwardarubin/Dropbox/Teaching/ARE212")
render("section10.Rmd",
pdf_document(
latex_engine = "xelatex",
toc = T,
number_sections = T,
highlight = "pygments",
pandoc_args = c(
"--metadata=author:\"Ed Rubin\"",
pandoc_variable_arg("mainfont", "Charter"),
pandoc_variable_arg("monofont", "Hack"),
pandoc_variable_arg("fontsize", "11pt")
)
),
output_dir = "Section10")
