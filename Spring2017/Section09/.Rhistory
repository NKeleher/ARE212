# Grab model estimates
models <- lapply(X = 1:length(state_list),
FUN = function(i) state_list[[i]][[1]]) %>% rbindlist()
# Grab predictions
model_predictions <- lapply(X = 1:length(state_list),
FUN = function(i) state_list[[i]][[2]]) %>% rbindlist()
models %>% View()
seven_dt <- copy(simple_dt[
state %in% c("GA", "NC", "TX", "FL", "OH", "TN", "VA")])
# The joint regression without state (for the 7 largest states)
lm_joint_no_state <- lm(total_collection ~ claim1_amount + loan_amount +
as.character(claim1_year),
data = seven_dt)
lm_joint_no_state %>% summary()
# Residual standard error: 18470 on 545 degrees of freedom
# Multiple R-squared:  0.8605,	Adjusted R-squared:  0.8571
# The joint regression with state interactions (for the 7 largest states)
lm_joint_state <- lm(total_collection ~ state * (claim1_amount + loan_amount +
as.character(claim1_year)),
data = seven_dt)
lm_joint_state %>% summary()
lm_joint_state$resid
seven_dt[, resid := lm_joint_state$resid]
# Add standardizing residual
seven_dt[, resid_z := (resid - mean(resid)) / sd(resid)]
seven_dt
head(seven_dt)
sum(abs(seven_dt$resid_z > 2.5))
lm_joint_state_subset <- lm(total_collection ~
state * (claim1_amount + loan_amount + as.character(claim1_year)),
data = seven_dt[, abs(resid_z) < 2.5])
lm_joint_state_subset %>% summary()
# Joint regression -------------------------------------------------------------
# Dataset of seven states
seven_dt <- copy(simple_dt[
state %in% c("GA", "NC", "TX", "FL", "OH", "TN", "VA")])
# The joint regression without state (for the 7 largest states)
lm_joint_no_state <- lm(total_collection ~ claim1_amount + loan_amount +
as.character(claim1_year),
data = seven_dt)
lm_joint_no_state %>% summary()
# Residual standard error: 18470 on 545 degrees of freedom
# Multiple R-squared:  0.8605,	Adjusted R-squared:  0.8571
# The joint regression with state interactions (for the 7 largest states)
lm_joint_state <- lm(total_collection ~ state * (claim1_amount + loan_amount +
as.character(claim1_year)),
data = seven_dt)
lm_joint_state %>% summary()
# Residual standard error: 17410 on 479 degrees of freedom
# Multiple R-squared:  0.8911,	Adjusted R-squared:  0.8731
# Add variable for residuals from lm_joint_state
seven_dt[, resid := lm_joint_state$resid]
# Add standardized residual
seven_dt[, resid_z := (resid - mean(resid)) / sd(resid)]
# Re-estimate model
lm_joint_state_subset <- lm(total_collection ~
state * (claim1_amount + loan_amount + as.character(claim1_year)),
data = seven_dt[, abs(resid_z) < 2.5])
lm_joint_state_subset %>% summary()
# Joint regression -------------------------------------------------------------
# Dataset of seven states
seven_dt <- copy(simple_dt[
state %in% c("GA", "NC", "TX", "FL", "OH", "TN", "VA")])
# The joint regression without state (for the 7 largest states)
lm_joint_no_state <- lm(total_collection ~ claim1_amount + loan_amount +
as.character(claim1_year),
data = seven_dt)
lm_joint_no_state %>% summary()
# Residual standard error: 18470 on 545 degrees of freedom
# Multiple R-squared:  0.8605,	Adjusted R-squared:  0.8571
# The joint regression with state interactions (for the 7 largest states)
lm_joint_state <- lm(total_collection ~ state * (claim1_amount + loan_amount +
as.character(claim1_year)),
data = seven_dt)
lm_joint_state %>% summary()
# Residual standard error: 17410 on 479 degrees of freedom
# Multiple R-squared:  0.8911,	Adjusted R-squared:  0.8731
# Add variable for residuals from lm_joint_state
seven_dt[, resid := lm_joint_state$resid]
# Add standardized residual
seven_dt[, resid_z := (resid - mean(resid)) / sd(resid)]
# Re-estimate model
lm_joint_state_subset <- lm(total_collection ~
state * (claim1_amount + loan_amount + as.character(claim1_year)),
data = seven_dt[abs(resid_z) < 2.5])
lm_joint_state_subset %>% summary()
seven_dt %>% dim
seven_dt[abs(resid_z) < 2.5] %>% dim
lm_joint_state_subset %>% summary()
lm_joint_state_subset %>% summary()
lm_joint_state_subset %>% names()
lm_joint_state_subset %>% summary
models
models[state == "NC"]
3.5e3 - 5.642e4
4.11e3
seven_dt %>% head
seven_dt[abs(resid_z) < 2.5 & state == "FL"]$total_collection %>% head
seven_dt[abs(resid_z) < 2.5 & state == "FL"]$total_collection %>% mean
3.5e3 - 5.642e4 - 79698.97
3.5e3 - 5.642e4 + 79698.97
models
models %>% View()
# Regression tree attempt ------------------------------------------------------
library(rpart)
# Add a few variables
tree_dt <- copy(simple_dt[
state %in% c("GA", "NC", "TX", "FL", "OH", "TN", "VA")])
tree_dt[, `:=`(
claim1_year_char  = as.character(claim1_year),
closing_year_char = as.character(closing_year),
tenure            = claim1_year - closing_year,
loan_above_144K   = loan_amount > 144000
#claim1_amount_z      = (claim1_amount - mean(claim1_amount, na.rm = T)) /
#  sd(claim1_amount, na.rm = T),
#loan_amount_z      = (loan_amount - mean(loan_amount, na.rm = T)) /
#  sd(loan_amount, na.rm = T)
)]
# The first tree
tree_1 <- rpart(
# The formula
total_collection ~ .,
# The dataset
data = tree_dt,
# Method
method = "anova",
# Controls
control = rpart.control(
minsplit = 10,
minbucket = 10,
cp = 0.001,
#usesurrogate = 0,
#surrogatestyle = 1,
maxdepth = 8,
xval = 5))
# Predictions from the first tree
tree_dt[, tree_1_pred := predict(tree_1)]
# Calculate RSE-like stats from tree's and OLS's predictions
sqrt(sum((tree_dt$total_collection - tree_dt$tree_1_pred)^2) / 559)
sqrt(sum(lm_joint_state$residuals^2) / 559)
tree_1 %>% summary
seven_dt %>% head
# Joint regression -------------------------------------------------------------
# Dataset of seven states
seven_dt <- copy(simple_dt[
state %in% c("GA", "NC", "TX", "FL", "OH", "TN", "VA")])
# The joint regression without state (for the 7 largest states)
lm_joint_no_state <- lm(total_collection ~ claim1_amount + loan_amount +
as.character(claim1_year),
data = seven_dt)
lm_joint_no_state %>% summary()
# Residual standard error: 18470 on 545 degrees of freedom
# Multiple R-squared:  0.8605,	Adjusted R-squared:  0.8571
# The joint regression with state interactions (for the 7 largest states)
lm_joint_state <- lm(total_collection ~ state * (claim1_amount + loan_amount +
as.character(claim1_year) + I(loan_amount > 144000)),
data = seven_dt)
lm_joint_state %>% summary()
# Residual standard error: 17410 on 479 degrees of freedom
# Multiple R-squared:  0.8911,	Adjusted R-squared:  0.8731
# Add variable for residuals from lm_joint_state
seven_dt[, resid := lm_joint_state$resid]
# Add standardized residual
seven_dt[, resid_z := (resid - mean(resid)) / sd(resid)]
# Re-estimate model
lm_joint_state_subset <- lm(total_collection ~
state * (claim1_amount + loan_amount + as.character(claim1_year)),
data = seven_dt[abs(resid_z) < 2.5])
lm_joint_state_subset %>% summary()
lm_joint_state <- lm(total_collection ~ state * (claim1_amount + loan_amount +
as.character(claim1_year) + I(loan_amount > 144000)),
data = seven_dt)
lm_joint_state %>% summary()
# Joint regression -------------------------------------------------------------
# Dataset of seven states
seven_dt <- copy(simple_dt[
state %in% c("GA", "NC", "TX", "FL", "OH", "TN", "VA")])
# The joint regression without state (for the 7 largest states)
lm_joint_no_state <- lm(total_collection ~ claim1_amount + loan_amount +
as.character(claim1_year),
data = seven_dt)
lm_joint_no_state %>% summary()
# Residual standard error: 18470 on 545 degrees of freedom
# Multiple R-squared:  0.8605,	Adjusted R-squared:  0.8571
# The joint regression with state interactions (for the 7 largest states)
lm_joint_state <- lm(total_collection ~ state * (claim1_amount + loan_amount +
as.character(claim1_year)),
data = seven_dt)
lm_joint_state %>% summary()
# Residual standard error: 17410 on 479 degrees of freedom
# Multiple R-squared:  0.8911,	Adjusted R-squared:  0.8731
# Add variable for residuals from lm_joint_state
seven_dt[, resid := lm_joint_state$resid]
# Add standardized residual
seven_dt[, resid_z := (resid - mean(resid)) / sd(resid)]
# Re-estimate model
lm_joint_state_subset <- lm(total_collection ~
state * (claim1_amount + loan_amount + as.character(claim1_year) + I(loan_amount > 144000)),
data = seven_dt[abs(resid_z) < 2.5])
lm_joint_state_subset %>% summary()
# Joint regression -------------------------------------------------------------
# Dataset of seven states
seven_dt <- copy(simple_dt[
state %in% c("GA", "NC", "TX", "FL", "OH", "TN", "VA")])
# The joint regression without state (for the 7 largest states)
lm_joint_no_state <- lm(total_collection ~ claim1_amount + loan_amount +
as.character(claim1_year),
data = seven_dt)
lm_joint_no_state %>% summary()
# Residual standard error: 18470 on 545 degrees of freedom
# Multiple R-squared:  0.8605,	Adjusted R-squared:  0.8571
# The joint regression with state interactions (for the 7 largest states)
lm_joint_state <- lm(total_collection ~ state * (claim1_amount + loan_amount +
as.character(claim1_year)),
data = seven_dt)
lm_joint_state %>% summary()
# Residual standard error: 17410 on 479 degrees of freedom
# Multiple R-squared:  0.8911,	Adjusted R-squared:  0.8731
# Add variable for residuals from lm_joint_state
seven_dt[, resid := lm_joint_state$resid]
# Add standardized residual
seven_dt[, resid_z := (resid - mean(resid)) / sd(resid)]
# Re-estimate model
lm_joint_state_subset <- lm(total_collection ~
state * (claim1_amount + loan_amount + as.character(claim1_year)),
data = seven_dt[abs(resid_z) < 2.5])
lm_joint_state_subset %>% summary()
View(dirty_dt)
dim(dirty_dt)
dim(seven_dt)
559 / 913
others_dt <- copy(simple_dt[
!(state %in% c("GA", "NC", "TX", "FL", "OH", "TN", "VA"))])
# The joint regression without state (for the 7 largest states)
lm_others <- lm(total_collection ~ claim1_amount + loan_amount +
as.character(claim1_year),
data = others_dt)
lm_others %>% summary()
others_dt[, resid := lm_others$resid]
others_dt[, resid_z := (resid - mean(resid)) / sd(resid)]
lm_others_subset <- lm(total_collection ~
claim1_amount + loan_amount + as.character(claim1_year),
data = others_dt[abs(resid_z) < 2.5])
lm_others_subset %>% summary()
others_dt[abs(resid_z) < 2.5] %>% dim
others_dt %>% dim
others_dt$state
others_dt$state %>% unique
dir(dir_data)
census_dt <- fread(paste0(dir_data, "census_region_crosswalk.csv"))
census_dt
others_dt %>% head
census_dt %>% head
others_dt <- merge(others_dt, census_dt, by = "state", all.x = T, all.y = F)
others_dt
census_dt <- fread(paste0(dir_data, "census_region_crosswalk.csv"))
census_dt %>% head
others_dt %>% head
others_dt <- copy(simple_dt[
!(state %in% c("GA", "NC", "TX", "FL", "OH", "TN", "VA"))])
# Join crosswalk to others_dt
others_dt <- merge(others_dt, census_dt, by = "state", all.x = T, all.y = F)
others_dt %>% head
others_dt <- copy(simple_dt[
!(state %in% c("GA", "NC", "TX", "FL", "OH", "TN", "VA"))])
# Join crosswalk to others_dt
others_dt <- merge(others_dt, census_dt, by = "state", all.x = T, all.y = F)
# The joint regression
lm_others <- lm(total_collection ~ claim1_amount + loan_amount +
as.character(claim1_year),
data = others_dt)
lm_others %>% summary()
others_dt %>% head
others$census_division %>% table()
others_dt$census_division %>% table()
others_dt$census_region %>% table()
others_dt$census_region %>% table()
lm_others_region <- lm(total_collection ~
census_region * (claim1_amount + loan_amount + as.character(claim1_year)),
data = others_dt)
lm_others_region %>% summary()
lm_others <- lm(total_collection ~ claim1_amount + loan_amount +
as.character(claim1_year),
data = others_dt)
lm_others %>% summary()
lm_others_region %>% summary()
others_dt[, resid := lm_others_region$resid]
others_dt[, resid_z := (resid - mean(resid)) / sd(resid)]
lm_others_subset <- lm(total_collection ~
claim1_amount + loan_amount + as.character(claim1_year),
data = others_dt[abs(resid_z) < 2.5])
lm_others_subset %>% summary()
lm_others_subset <- lm(total_collection ~
census_region * (claim1_amount + loan_amount + as.character(claim1_year)),
data = others_dt[abs(resid_z) < 2.5])
lm_others_subset %>% summary()
others_dt[abs(resid_z) < 2.5] %>% dim
others_dt %>% dim
lm_others_subset %>% summary()
lm_others_subset %>% summary()
lm_others_subset <- lm(total_collection ~
census_division * (claim1_amount + loan_amount + as.character(claim1_year)),
data = others_dt[abs(resid_z) < 2.5])
lm_others_subset %>% summary()
lm_others_subset <- lm(total_collection ~
census_region * (claim1_amount + loan_amount + as.character(claim1_year)),
data = others_dt[abs(resid_z) < 2.5])
lm_others_subset %>% summary()
lm_joint_state_subset %>% summary()
lm_others_subset %>% summary()
lm_joint_state_subset %>% summary()
lm_joint_state_subset %>% summary() %>% coef()
dir_save    <- paste0(dir_project, "Tables/20160324/")
write.csv(x = lm_joint_state_subset %>% summary() %>% coef(),
file = paste0(dir_save, "regression_top_7_states.csv"))
write.csv(x = lm_others_subset %>% summary() %>% coef(),
file = paste0(dir_save, "regression_others_states.csv"))
write.csv(x = models,
file = paste0(dir_save, "regressions_individual_top_7_states.csv"))
write.csv(x = models,
file = paste0(dir_save, "regressions_individual_top_7_states.csv"),
row.names = FALSE)
install.packages("servr")
install.packages("htmlwidgets")
# Setup ----
# Options
options(stringsAsFactors = F)
options(scipen = 10)
# Packages
library(readr)
library(lfe)
library(dplyr)
library(magrittr)
library(parallel)
library(ggplot2)
library(viridis)
library(gmodels)
library(msm)
# Directory
setwd("/Users/edwardarubin/Dropbox/Teaching/ARE212/Section09")
# My ggplot2 theme
theme_ed <- theme(
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_rect(fill = NA, color = "grey75"),
axis.ticks = element_line(color = "grey85"),
panel.grid.major = element_line(color = "grey95", size = 0.2),
panel.grid.minor = element_line(color = "grey95", size = 0.2),
legend.key = element_blank())
# Load data ----
cars <- read_csv("auto.csv")
# Functions ----
# Function to convert tibble, data.frame, or tbl_df to matrix
to_matrix <- function(the_df, vars) {
# Create a matrix from variables in var
new_mat <- the_df %>%
# Select the columns given in 'vars'
select_(.dots = vars) %>%
# Convert to matrix
as.matrix()
# Return 'new_mat'
return(new_mat)
}
# Function for OLS coefficient estimates
b_ols <- function(y, X) {
# Calculate beta hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
# Return beta_hat
return(beta_hat)
}
# Function for OLS coef., SE, t-stat, and p-value
ols <- function(data, y_var, X_vars) {
# Turn data into matrices
y <- to_matrix(data, y_var)
X <- to_matrix(data, X_vars)
# Add intercept
X <- cbind(1, X)
# Calculate n and k for degrees of freedom
n <- nrow(X)
k <- ncol(X)
# Estimate coefficients
b <- b_ols(y, X)
# Update names
rownames(b)[1] <- "Intercept"
# Calculate OLS residuals
e <- y - X %*% b
# Calculate s^2
s2 <- (t(e) %*% e) / (n-k)
# Inverse of X'X
XX_inv <- solve(t(X) %*% X)
# Standard error
se <- sqrt(s2 * diag(XX_inv))
# Vector of _t_ statistics
t_stats <- (b - 0) / se
# Calculate the p-values
p_values = pt(q = abs(t_stats), df = n-k, lower.tail = F) * 2
# Nice table (data.frame) of results
results <- data.frame(
# The rows have the coef. names
effect = rownames(b),
# Estimated coefficients
coef = as.vector(b),
# Standard errors
std_error = as.vector(se),
# t statistics
t_stat = as.vector(t_stats),
# p-values
p_value = as.vector(p_values)
)
# Return the results
return(results)
}
# Linear combinations ----
# Regress price on mpg and weight
reg1 <- ols(cars, "price", c("mpg", "weight"))
# lc = 20 * b1 + 3000 * b2
(lc <- 20 * reg1[2,2] + 3000 * reg1[3,2])
# A new vcov function ----
# Variance-covariance function for OLS beta hat
vcov_ols <- function(data, y_var, X_vars) {
# Turn data into matrices
y <- to_matrix(data, y_var)
X <- to_matrix(data, X_vars)
# Add intercept
X <- cbind(1, X)
# Label intercept
colnames(X)[1] <- "intercept"
# Calculate n and k for degrees of freedom
n <- nrow(X)
k <- ncol(X)
# Estimate coefficients
b <- b_ols(y, X)
# Calculate residuals
e <- y - X %*% b
# Calculate s2 and convert to scalar
s2 <- (t(e) %*% e / (n - k)) %>% as.vector()
# Calculate the variance-covariance matrix
vcov_mat <- s2 * solve(t(X) %*% X)
# Return the variance-covariance matrix
return(vcov_mat)
}
# Run the vcov_ols() function
vcov_ols(cars, "price", c("mpg", "weight"))
reg1 <- ols(cars, "price", c("mpg", "weight"))
reg1
vcov1 <- vcov_ols(cars, "price", c("mpg", "weight"))
vcov1
(lc_se <- sqrt(20^2 * vcov1[2,2] + 3000^2 * vcov1[3,3] +
2 * 20 * 3000 * vcov1[2,3]))
lm_est <- lm(price ~ mpg + weight, data = cars)
class(lm_est)
obj = lm_est
estimable(obj = lm_est, cm = c(0, 20, 3000))
lc
estimable(obj = lm_est, cm = c(0, 20, 3000))
lc / lc_se
waldtest(lm_est, ~ 20 * mpg + 3000 * weight)
lc <- 20 * reg1[2,2] + 3000 * reg1[3,2]
lc
vcov1 <- vcov_ols(cars, "price", c("mpg", "weight"))
deriv_mat <- matrix(c(0, 20, 3000), nrow = 1)
lc_dm <- sqrt(deriv_mat %*% vcov1 %*% t(deriv_mat))
lc_dm
lc_se
tmp <- data.frame(x = 1:10, y = 1:10)
tmp
i < - 3
i <- 3
i
tmp_name <- paste0("x", i)
tmp_value <- 1 * (tmp$x > i)
tmp_name
tmp_value
tmp <- data.frame(x = 1:10, y = 1:10)
for (i in 1:5) {
tmp_name <- paste0("x", i)
tmp_value <- 1 * (tmp$x > i)
tmp %<>% mutate(tmp_name = tmp_value)
}
tmp
tmp <- data.frame(x = 1:10, y = 1:10)
for (i in 1:5) {
tmp_name <- paste0("x", i)
tmp_value <- 1 * (tmp$x > i)
tmp %<>% mutate_(tmp_name = tmp_value)
}
tmp
tmp
tmp[, x3]
tmp[, "x3"]
tmp[, "x3"] <- 1
tmp
tmp <- data.frame(x = 1:10, y = 1:10)
for (i in 1:5) {
tmp_name <- paste0("x", i)
tmp_value <- 1 * (tmp$x > i)
tmp[, tmp_name] <- tmp_value)
}
tmp <- data.frame(x = 1:10, y = 1:10)
for (i in 1:5) {
tmp_name <- paste0("x", i)
tmp_value <- 1 * (tmp$x > i)
tmp[, tmp_name] <- tmp_value)
}
tmp <- data.frame(x = 1:10, y = 1:10)
for (i in 1:5) {
tmp_name <- paste0("x", i)
tmp_value <- 1 * (tmp$x > i)
tmp[, tmp_name] <- tmp_value
}
tmp
fun_xy(3,4)
